{"version":3,"sources":["views/apps/permission/store/index.js","views/apps/permission/modal/index.js","views/apps/permission/Form.js","views/apps/permission/Table.js"],"names":["axios","useJwt","ssoAxiosInterceptor","pageTitle","storeName","endpointName","serverSideGrid","detailFromGrid","getAlwaysGrid","getApiAfterPut","getApiAfterPost","getApiAfterDelete","getApiSummaryData","detailPage","deleteSelection","dynamicColumns","dynamicColumnsFilter","filterLabel","fieldName","dynamicForm","extraCrud","crudName","crudLabel","getSummaryData","createAsyncThunk","params","a","Object","keys","forEach","key","get","response","data","getDataList","total","getDataById","id","rejectWithValue","resetSelectedData","postData","user","dispatch","getState","post","resetData","putData","selectedData","put","deleteData","delete","deleteSelectedRowData","setDataById","rowData","StoreSlice","createSlice","name","initialState","statusSummary","isLoadingSummary","errorSummary","dataSummary","status","isLoading","error","dataDropdown","statusDetail","isLoadingDetail","errorDetail","statusAddEdit","isLoadingAddEdit","errorAddEdit","statusDelete","isLoadingDelete","errorDelete","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","length","map","item","value","label","title","ModalAddEdit","show","setShow","formState","setFormState","t","useTranslation","useParams","useDispatch","store","useSelector","colors","useContext","ThemeColors","useState","setLoadingText","sortedObject","unordered","sort","reduce","obj","handleReset","isOpen","toggle","className","blocking","loader","updateDataToApi","storeData","JSON","stringify","countChanges","values","every","field","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","danger","setError","type","icon","postDataToApi","FormAddEdit","useForm","control","handleSubmit","errors","onSubmit","md","xs","for","defaultValue","render","invalid","description","subject","outline","onClick","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","CustomHeader","handleAddEdit","handlePerPage","rowsPerPage","handleFilter","searchTerm","handleFiltersChange","selectedRow","handleDeleteSelected","filtersCustomAdd","ability","AbilityContext","allStore","dynamicFilterComponents","setDynamicFilterComponents","dynamicFilterDatas","handleChangeInputs","isMulti","index","indexOf","splice","push","useEffect","componentsImport","i","path_name","replaceAll","MyComponent","lazy","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","x","lookupMode_isM2MDefValFromGrid","lg","htmlFor","onChange","width","e","target","fallback","can","sessionStorage","getItem","List","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","setSort","setRowsPerPage","selectedRows","setSelectedRows","filtersCustom","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","showModal","setShowModal","navigate","useNavigate","location","useLocation","colorsAssignee","Viewer","Editor","Manager","Administrator","pathname","r","handleCloseModal","revivalBack","handleDelete","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","countSelectedCopy","debounceFn","useCallback","debounce","inputValue","search","page","handleRowSelected","conditionalRowStyles","when","row","Array","isArray","classNames","columns","column","columnName","sortField","center","wrap","grow","sortable","selector","cell","renderCell","assignedTo","assignee","isLastBadge","to","classnames","pill","marginTop","replace","appsName","menuCount","endpointCount","handleEdit","tableColumns","useMemo","sx","bgcolor","dark","light","animation","height","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","paginationComponent","count","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","some","k","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","par_name","neutralizeBack"],"mappings":"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","file":"static/js/11.2f039a52.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\n// import axios from \"axios\"\nimport { resetData } from \"../../../my-info/store/my_activities\"\nimport useJwt from \"@src/auth/jwt/useJwt\"\nconst axios = useJwt.ssoAxiosInterceptor\nexport const pageTitle = \"Permission\" ////\nexport const storeName = \"apps_permission\" ////\nexport const endpointName = \"api/permission\" ////\n\nexport const serverSideGrid = true ////\nexport const detailFromGrid = true //// GET DETAIL DATA FROM EXISTING DATA GRID (FASTER PEFORMANCE)\nexport const getAlwaysGrid = false //// GET ALWAYS GRID DATA EVERY CLICK MENU OR OPEN PAGE\nexport const getApiAfterPut = true ////\nexport const getApiAfterPost = true ////\nexport const getApiAfterDelete = true ////\nexport const getApiSummaryData = false //// GET SUMMARY DATA FROM BACKEND API\nexport const detailPage = true //// IF TRUE { WILL BE ACTIVATED DETAIL PAGE AND MENU ACTION BUTTON } ELSE { DETAIL PAGE SHOW ON MODAL }\nexport const deleteSelection = false\n\n///////DYNAMIC COLUMNS FOR TABLE\n///////if there are several fields that will be customised, don't set them here but add them to the Table.js component in the column section\nexport const dynamicColumns = []\n\n///////DYNAMIC FILTERS FOR TABLE\nexport const dynamicColumnsFilter = [\n  {\n    filterLabel: \"Role\",\n    fieldName: \"id_role\"\n  }\n]\n\n///////DYNAMIC FORM FOR MODAL\n///////if the fields display on the modal form matches the number of fields in the columns, leave this section filled with an empty array \" dynamicForm = [] \". Or if you want to customize, do it on the modal/index.js component\nexport const dynamicForm = []\n\nexport const extraCrud = [\n  {\n    crudName: \"permission_menu\",\n    crudLabel: \"Permission to Menu\"\n  },\n  {\n    crudName: \"permission_endpoint\",\n    crudLabel: \"Permission to Endpoint\"\n    // crudDescription: \"Permission to Endpoint\"\n  }\n]\n\nexport const getSummaryData = createAsyncThunk(\n  `${endpointName}/getSummaryData`,\n  async (params) => {\n    Object.keys(params).forEach((key) => {\n      if (params[key] === null || params[key] === \"\") {\n        delete params[key]\n      }\n    })\n    const response = await axios.get(`/${endpointName}/summary`, {\n      params\n    })\n    return {\n      params,\n      data: response.data.data\n    }\n  }\n)\n\nexport const getDataList = createAsyncThunk(\n  `${endpointName}/getDataList`,\n  async (params) => {\n    Object.keys(params).forEach((key) => {\n      if (params[key] === null || params[key] === \"\") {\n        delete params[key]\n      }\n    })\n    const response = await axios.get(`/${endpointName}`, {\n      params\n    })\n    return {\n      params,\n      data: response.data.data,\n      total: response.data.total\n    }\n  }\n)\n\nexport const getDataById = createAsyncThunk(\n  `${endpointName}/getDataById`,\n  async (id, { rejectWithValue }) => {\n    try {\n      const response = await axios.get(`/${endpointName}/${id}`)\n      return response.data.data\n    } catch (error) {\n      return rejectWithValue(error.response.data)\n    }\n  }\n)\n\nexport const resetSelectedData = createAsyncThunk(\n  `${endpointName}/resetSelectedData`,\n  async ({ rejectWithValue }) => {\n    return rejectWithValue({})\n  }\n)\n\nexport const postData = createAsyncThunk(\n  `${endpointName}/postData`,\n  async (user, { dispatch, getState, rejectWithValue }) => {\n    try {\n      const response = await axios.post(`/${endpointName}`, user)\n      dispatch(resetSelectedData({}))\n      if (getApiAfterPost) {\n        dispatch(getDataList(getState()[storeName].params))\n      }\n      dispatch(resetData({}))\n      return response.data\n    } catch (error) {\n      return rejectWithValue(error.response.data)\n    }\n  }\n)\n\nexport const putData = createAsyncThunk(\n  `${endpointName}/putData`,\n  async (data, { dispatch, getState, rejectWithValue }) => {\n    const id = getState()[storeName].selectedData.id\n    try {\n      const response = await axios.put(`/${endpointName}/${id}`, data)\n      dispatch(resetSelectedData({}))\n      if (getApiAfterPut) {\n        dispatch(getDataList(getState()[storeName].params))\n        if (getApiSummaryData) {\n          dispatch(getSummaryData({}))\n        }\n      }\n      dispatch(resetData({}))\n      return response.data\n    } catch (error) {\n      return rejectWithValue(error.response.data)\n    }\n  }\n)\n\nexport const deleteData = createAsyncThunk(\n  `${endpointName}/deleteData`,\n  async (id, { dispatch, getState, rejectWithValue }) => {\n    try {\n      const response = await axios.delete(`/${endpointName}/${id}`)\n      if (getApiAfterDelete) {\n        await dispatch(getDataList(getState()[storeName].params))\n        if (getApiSummaryData) {\n          dispatch(getSummaryData({}))\n        }\n      }\n      dispatch(resetData({}))\n      return response.data\n    } catch (error) {\n      return rejectWithValue(error.response.data)\n    }\n  }\n)\n\nexport const deleteSelectedRowData = createAsyncThunk(\n  `${endpointName}/deleteSelectedRowData`,\n  async (data, { dispatch, getState, rejectWithValue }) => {\n    try {\n      const response = await axios.delete(`/${endpointName}`, { data })\n      if (getApiAfterDelete) {\n        await dispatch(getDataList(getState()[storeName].params))\n        if (getApiSummaryData) {\n          dispatch(getSummaryData({}))\n        }\n      }\n      dispatch(resetData({}))\n      return response.data\n    } catch (error) {\n      return rejectWithValue(error.response.data)\n    }\n  }\n)\n\nexport const setDataById = createAsyncThunk(\n  `${endpointName}/setDataById`,\n  async (rowData, { rejectWithValue }) => {\n    return rejectWithValue(rowData)\n  }\n)\n\nconst fetchStatus = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\n\nexport const StoreSlice = createSlice({\n  name: storeName,\n  initialState: {\n    dynamicColumns,\n    pageTitle,\n    // SUMMARY\n    statusSummary: fetchStatus,\n    isLoadingSummary: false,\n    errorSummary: \"\" | null,\n    dataSummary: [],\n\n    // ALL\n    status: fetchStatus,\n    isLoading: false,\n    error: \"\" | null,\n    data: [],\n    total: 1,\n\n    params: {},\n    selectedData: null,\n    dataDropdown: [],\n\n    // DETAIL\n    statusDetail: fetchStatus,\n    isLoadingDetail: false,\n    errorDetail: \"\" | null,\n\n    // ADD&EDIT\n    statusAddEdit: fetchStatus,\n    isLoadingAddEdit: false,\n    errorAddEdit: \"\" | null,\n\n    // ADD&EDIT\n    statusDelete: fetchStatus,\n    isLoadingDelete: false,\n    errorDelete: \"\" | null\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      ///SUMMARY\n      .addCase(getSummaryData.pending, (state) => {\n        state.statusSummary = \"loading\"\n        state.isLoadingSummary = true\n      })\n      .addCase(getSummaryData.fulfilled, (state, action) => {\n        // console.log(action.payload)\n        state.statusSummary = \"succeeded\"\n        state.isLoadingSummary = false\n        state.dataSummary = action.payload.data\n      })\n      .addCase(getSummaryData.rejected, (state, action) => {\n        state.statusSummary = \"failed\"\n        state.isLoadingSummary = false\n        state.errorSummary = action.error.message\n      })\n\n      ///ALL\n      .addCase(getDataList.pending, (state) => {\n        state.status = \"loading\"\n        state.isLoading = true\n      })\n      .addCase(getDataList.fulfilled, (state, action) => {\n        // console.log(action.payload)\n        state.status = \"succeeded\"\n        state.isLoading = false\n        if (action.payload.data.length > 0) {\n          state.data = action.payload.data\n          state.dataDropdown = action.payload.data.map((item) => ({\n            value: item.id,\n            label: item.title,\n            post: false,\n            put: false,\n            delete: false,\n            get: false\n          }))\n          // state.selectedData = {\n          //   value: action.payload.data[0].id,\n          //   label: `${action.payload.data[0].KodeSumberDana} ${action.payload.data[0].NamaSumberDana}`\n          // }\n        }\n        state.params = action.payload.params\n        state.total = action.payload.total\n      })\n      .addCase(getDataList.rejected, (state, action) => {\n        state.status = \"failed\"\n        state.isLoading = false\n        state.error = action.error.payload?.message\n      })\n\n      ///EDIT\n      .addCase(putData.pending, (state) => {\n        state.statusAddEdit = \"loading\"\n        state.isLoadingAddEdit = true\n      })\n      .addCase(putData.fulfilled, (state) => {\n        // console.log(action.payload)\n        state.statusAddEdit = \"succeeded\"\n        state.isLoadingAddEdit = false\n      })\n      .addCase(putData.rejected, (state, action) => {\n        state.statusAddEdit = \"failed\"\n        state.isLoadingAddEdit = false\n        state.errorAddEdit = action.payload?.message\n      })\n\n      ///ADD\n      .addCase(postData.pending, (state) => {\n        state.statusAddEdit = \"loading\"\n        state.isLoadingAddEdit = true\n      })\n      .addCase(postData.fulfilled, (state) => {\n        // console.log(action.payload)\n        state.statusAddEdit = \"succeeded\"\n        state.isLoadingAddEdit = false\n      })\n      .addCase(postData.rejected, (state, action) => {\n        state.statusAddEdit = \"failed\"\n        state.isLoadingAddEdit = false\n        state.errorAddEdit = action.payload?.message\n      })\n\n      ///DELETE\n      .addCase(deleteData.pending, (state) => {\n        state.statusDelete = \"loading\"\n        state.isLoadingDelete = true\n      })\n      .addCase(deleteData.fulfilled, (state) => {\n        // console.log(action.payload)\n        state.statusDelete = \"succeeded\"\n        state.isLoadingDelete = false\n      })\n      .addCase(deleteData.rejected, (state, action) => {\n        state.statusDelete = \"failed\"\n        state.isLoadingDelete = false\n        state.errorDelete = action.payload?.message\n      })\n\n      ///DELETE-SELECTED-ROW\n      .addCase(deleteSelectedRowData.pending, (state) => {\n        state.statusDelete = \"loading\"\n        state.isLoadingDelete = true\n      })\n      .addCase(deleteSelectedRowData.fulfilled, (state) => {\n        // console.log(action.payload)\n        state.statusDelete = \"succeeded\"\n        state.isLoadingDelete = false\n      })\n      .addCase(deleteSelectedRowData.rejected, (state, action) => {\n        state.statusDelete = \"failed\"\n        state.isLoadingDelete = false\n        state.errorDelete = action.payload?.message\n      })\n\n      ///DETAIL\n      .addCase(getDataById.pending, (state) => {\n        state.statusDetail = \"loading\"\n        state.isLoadingDetail = true\n      })\n      .addCase(getDataById.fulfilled, (state, action) => {\n        state.statusDetail = \"succeeded\"\n        state.isLoadingDetail = false\n        state.selectedData = action.payload\n      })\n      .addCase(getDataById.rejected, (state, action) => {\n        state.statusDetail = \"failed\"\n        state.isLoadingDetail = false\n        state.selectedData = null\n        state.errorDetail = action.payload?.message\n      })\n\n      ///OTHERS\n      .addCase(resetSelectedData.rejected, (state) => {\n        state.selectedData = null\n      })\n      .addCase(setDataById.rejected, (state, action) => {\n        state.selectedData = action.payload\n      })\n  }\n})\n\nexport default StoreSlice.reducer\n","/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"../store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport FormAddEdit from \"../Form\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  // const [tgl1, setTgl1] = useState(null)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  // const {\n  //   control,\n  //   setError,\n  //   handleSubmit,\n  //   formState: { errors }\n  // } = useForm({})\n\n  function sortedObject(unordered) {\n    return Object.keys(unordered)\n      .sort()\n      .reduce((obj, key) => {\n        obj[key] = unordered[key]\n        return obj\n      }, {})\n  }\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(store.selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = (data) => {\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = (data) => {\n    if (\n      Object.values(data).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(data)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  function handleReset() {\n    dispatch(resetSelectedData())\n    setFormState(\"add\")\n    return setShow(false)\n  }\n\n  return !detailPage ? (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <FormAddEdit\n            formState={formState}\n            updateDataToApi={updateDataToApi}\n            postDataToApi={postDataToApi}\n            handleReset={handleReset}\n          />\n          {/* <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"title\">\n                  {t(\"Title\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.title ?? \"\"}\n                  control={control}\n                  id=\"title\"\n                  name=\"title\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.title\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"title\"\n                      invalid={errors.title && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"description\">\n                  {t(\"Description\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.description ?? \"\"}\n                  control={control}\n                  id=\"description\"\n                  name=\"description\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.description\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"description\"\n                      invalid={errors.description && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"subject\">\n                  {t(\"Subject\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.subject ?? \"\"}\n                  control={control}\n                  id=\"subject\"\n                  name=\"subject\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.subject\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"subject\"\n                      invalid={errors.subject && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form> */}\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  ) : null\n}\n\nexport default ModalAddEdit\n","/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"./store\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst FormAddEdit = ({\n  formState,\n  updateDataToApi,\n  postDataToApi,\n  handleReset\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  return (\n    <Form\n      onSubmit={\n        formState === \"edit\"\n          ? handleSubmit(updateDataToApi)\n          : handleSubmit(postDataToApi)\n      }\n    >\n      <Row className=\"gy-1 pt-75\">\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"title\">\n            {t(\"Title\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.title ?? \"\"}\n            control={control}\n            id=\"title\"\n            name=\"title\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.title ? \"form-control is-invalid\" : \"form-control\"\n                }\n                id=\"title\"\n                invalid={errors.title && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"description\">\n            {t(\"Description\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.description ?? \"\"}\n            control={control}\n            id=\"description\"\n            name=\"description\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.description\n                    ? \"form-control is-invalid\"\n                    : \"form-control\"\n                }\n                id=\"description\"\n                invalid={errors.description && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"subject\">\n            {t(\"Subject\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.subject ?? \"\"}\n            control={control}\n            id=\"subject\"\n            name=\"subject\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.subject ? \"form-control is-invalid\" : \"form-control\"\n                }\n                id=\"subject\"\n                invalid={errors.subject && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col xs={12} className=\"text-center mt-2 pt-50\">\n          <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n            {t(\"Submit\")}\n          </Button>\n          <Button type=\"reset\" color=\"secondary\" outline onClick={handleReset}>\n            {t(\"Cancel\")}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nexport default FormAddEdit\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef,\n  lazy,\n  Suspense\n} from \"react\"\nimport classnames from \"classnames\"\nimport { Link, useNavigate, useLocation } from \"react-router-dom\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  deleteSelection,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  detailPage,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  resetSelectedData,\n  deleteData,\n  deleteSelectedRowData,\n  dynamicColumnsFilter\n} from \"./store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid,\n  Copy,\n  Slack,\n  User,\n  Settings,\n  Database,\n  Edit2,\n  MoreVertical,\n  Trash2,\n  Archive,\n  Eye,\n  CheckCircle,\n  CheckSquare,\n  Check,\n  Square\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Label,\n  Button,\n  CardBody,\n  CardTitle,\n  CardHeader,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  Badge,\n  UncontrolledTooltip,\n  CardText\n} from \"reactstrap\"\n\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\n\nconst MySwal = withReactContent(Swal)\nconst BootstrapCheckbox = forwardRef((props, ref) => (\n  <div className=\"form-check\">\n    <Input type=\"checkbox\" ref={ref} {...props} />\n  </div>\n))\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  handleAddEdit,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm,\n  selectedRow,\n  handleDeleteSelected,\n  handleFiltersChange,\n  filtersCustomAdd\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const allStore = useSelector((state) => state)\n  const [dynamicFilterComponents, setDynamicFilterComponents] = useState({})\n  const [dynamicFilterDatas, setDynamicFilterDatas] = useState({})\n\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\n    fieldName = `filter_${fieldName}`\n    if (isMulti) {\n      if (dynamicFilterDatas[fieldName]) {\n        const index = dynamicFilterDatas[fieldName].indexOf(value)\n        if (index !== -1) {\n          dynamicFilterDatas[fieldName].splice(index, 1)\n        } else {\n          dynamicFilterDatas[fieldName].push(value)\n        }\n      } else {\n        dynamicFilterDatas[fieldName] = [value]\n      }\n    } else {\n      dynamicFilterDatas[fieldName] = value\n    }\n    return handleFiltersChange(dynamicFilterDatas[fieldName], fieldName)\n  }\n\n  useEffect(() => {\n    // DYNAMIC IMPORT COMPONENTS\n    let componentsImport = {}\n    for (let i = 0; i < dynamicColumnsFilter.length; i++) {\n      const fieldName = dynamicColumnsFilter[i][\"fieldName\"]\n      const path_name = dynamicColumnsFilter[i][\"fieldName\"].replaceAll(\n        \"id_\",\n        \"\"\n      )\n\n      dynamicFilterDatas[`filter_${fieldName}`] = null\n      const MyComponent = lazy(() => import(`../${path_name}`))\n      componentsImport[`${path_name}_comp`] = (\n        <MyComponent\n          lookupMode={true}\n          lookupMode_fieldName={fieldName}\n          lookupMode_dropdown={true}\n          lookupMode_isMulti={dynamicColumnsFilter[i].isMultiSelection ?? false}\n          lookupMode_onChange={handleChangeInputs}\n          lookupMode_defaultValue={\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid\n              ? allStore[storeName].data.map((x) => x[fieldName])\n              : allStore[storeName]?.selectedData\n              ? allStore[storeName].selectedData[fieldName]\n              : \"\"\n          }\n          lookupMode_isM2MDefValFromGrid={\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid ?? false\n          }\n        />\n      )\n    }\n\n    setDynamicFilterComponents(componentsImport)\n  }, [dispatch, dynamicFilterDatas])\n\n  return (\n    <Row className=\"text-nowrap w-100 my-75 g-0 permission-header\">\n      <Col xs={12} lg={4} className=\"d-flex align-items-center\">\n        <div className=\"d-flex align-items-center justify-content-center justify-content-lg-start\">\n          <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n          <Input\n            className=\"mx-50\"\n            type=\"select\"\n            id=\"rows-per-page\"\n            value={rowsPerPage}\n            onChange={handlePerPage}\n            style={{ width: \"5rem\" }}\n          >\n            <option value=\"10\">10</option>\n            <option value=\"25\">25</option>\n            <option value=\"50\">50</option>\n          </Input>\n          <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n        </div>\n      </Col>\n      <Col xs={12} lg={8}>\n        <div className=\"d-flex align-items-center justify-content-lg-end justify-content-start flex-md-nowrap flex-wrap mt-lg-0 mt-1\">\n          <div className=\"d-flex align-items-center me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n          {/* <div className=\"mt-50 width-200 me-1 mt-sm-0 mt-1\">\n            <Input\n              type=\"select\"\n              name=\"select\"\n              // value={role}\n              onChange={(e) => handleAssignedToChange(e.target.value)}\n            >\n              <option value=\"\">Select Role</option>\n              <option value=\"administrator\">Administrator</option>\n              <option value=\"manager\">Manager</option>\n              <option value=\"user\">User</option>\n              <option value=\"support\">Support</option>\n              <option value=\"restricted-user\">Restricted User</option>\n            </Input>\n          </div> */}\n          {dynamicColumnsFilter.map((item, index) => {\n            const path_name = item.fieldName.replaceAll(\"id_\", \"\")\n            return (\n              <div\n                key={path_name}\n                className=\"mt-50 width-300 me-1 mt-sm-0 mt-1\"\n              >\n                <Suspense fallback={<div>Loading...</div>}>\n                  {dynamicFilterComponents[`${path_name}_comp`]}\n                </Suspense>\n              </div>\n            )\n          })}\n\n          {ability.can(\"post\", sessionStorage.getItem(\"current_page_perm\")) ? (\n            <Button\n              className=\"add-permission mt-sm-0 mt-1\"\n              color=\"primary\"\n              // onClick={toggleSidebar}\n              onClick={handleAddEdit}\n            >\n              {t(\"Add New\")} {t(pageTitle)}\n            </Button>\n          ) : null}\n        </div>\n      </Col>\n    </Row>\n  )\n}\n\nconst List = ({ filtersCustomAdd }) => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const { colors } = useContext(ThemeColors)\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [selectedRows, setSelectedRows] = useState([])\n\n  const [filtersCustom, setFiltersCustom] = useState(filtersCustomAdd ?? {})\n\n  const [toggleCleared, setToggleCleared] = useState(false)\n\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n  const navigate = useNavigate()\n  const location = useLocation()\n  const colorsAssignee = {\n    Viewer: \"light-info\",\n    Editor: \"light-success\",\n    Manager: \"light-warning\",\n    Administrator: \"light-primary\",\n    \"restricted-user\": \"light-danger\"\n  }\n\n  const handleAddEdit = (rowData) => {\n    // console.log(rowData.id)\n    if (!rowData.id) {\n      setFormState(\"edit\")\n    } else {\n      setFormState(\"add\")\n    }\n    //\n    if (!detailPage) {\n      if (!detailFromGrid) {\n        setLoadingText(\n          `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n        )\n        setLoading(true)\n        dispatch(getDataById(rowData.id)).then((res) => {\n          if (res.meta.requestStatus === \"rejected\") {\n            setLoading(false)\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          } else {\n            setLoading(false)\n            setShowModal(true)\n          }\n        })\n      } else {\n        setLoadingText(\n          `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n        )\n        setLoading(true)\n        dispatch(setDataById(rowData)).then(() => {\n          setLoading(false)\n          setShowModal(true)\n        })\n      }\n    } else {\n      if (rowData.id) {\n        navigate(`${location.pathname}/edit/${rowData.id}`)\n      } else {\n        dispatch(resetSelectedData({})).then((r) => {\n          navigate(`${location.pathname}/add`)\n        })\n      }\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    // console.log(\"here\")\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const handleDeleteSelected = async () => {\n    const countSelectedCopy = selectedRows.length\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\n        \"selected data. Deleted data cannot be recovered\"\n      )}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\n        pageTitle\n      )}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\n      )\n      setLoading(true)\n      const values = selectedRows.map((a) => a.id)\n      // console.log(values)\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setSelectedRows([])\n          setToggleCleared(!toggleCleared)\n          setLoading(false)\n          toast.success(\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\n            {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            }\n          )\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /////PAGINATION SERVERSIDE\n  const handlePagination = (page) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1,\n        ...filtersCustom\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage,\n        ...filtersCustom\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  const handleDebounceFn = (inputValue) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        search: inputValue,\n        sort,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\n\n  const handleFilter = (event) => {\n    setSearchTerm(event)\n    debounceFn(event)\n  }\n\n  const handleFiltersChange = (value, par_name) => {\n    filtersCustom[par_name] = value\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const handleRowSelected = useCallback((state) => {\n    setSelectedRows(state.selectedRows)\n  }, [])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const conditionalRowStyles = [\n    {\n      when: (row) => Array.isArray(row),\n      classNames: [\"d-table\"]\n    }\n  ]\n\n  const columns = [\n    ...store.dynamicColumns.map((column) => ({\n      name: column.columnName,\n      sortField: column.fieldName,\n      center: false,\n      wrap: true,\n      grow: 0,\n      sortable: true,\n      width: \"250px\",\n      selector: (row) => row[column.fieldName],\n      cell: (row) => renderCell(row, column)\n    })),\n    {\n      name: t(\"Title\"),\n      center: false,\n      sortable: true,\n      wrap: true,\n      width: \"350px\",\n      sortField: \"title\",\n      selector: (row) => row.title,\n      cell: (row) => {\n        const title = row.title,\n          description = row.description ? row.description : \"\"\n        return (\n          <div className=\"d-flex justify-content-left align-items-center\">\n            <div className=\"d-flex flex-column\">\n              <h6 className=\"user-name text-truncate mb-0\">{title}</h6>\n              <small className=\"text-truncate text-muted mb-0\">\n                {description}\n              </small>\n            </div>\n          </div>\n        )\n      }\n    },\n\n    // {\n    //   name: t(\"Subject\"),\n    //   center: false,\n    //   sortable: true,\n    //   // minWidth: \"400px\",\n    //   sortField: \"subject\",\n    //   selector: (row) => row.subject,\n    //   cell: (row) => row.subject\n    // },\n    {\n      name: t(\"Assigned To\"),\n      sortable: false,\n      wrap: false,\n      grow: 2,\n      width: \"300px\",\n      cell: ({ assignedTo }) => {\n        if (assignedTo) {\n          return assignedTo.map((assignee, index) => {\n            const isLastBadge = assignedTo[assignedTo.length - 1] === index\n            return (\n              <Link\n                key={`${assignee}-${index}`}\n                to=\"/apps/roles\"\n                className={classnames({ \"me-50\": !isLastBadge })}\n              >\n                <Badge\n                  pill\n                  color={colorsAssignee[assignee]}\n                  style={{\n                    marginTop: \"2px\"\n                  }}\n                  className=\"text-capitalize\"\n                >\n                  {assignee?.replace(\"-\", \" \")}\n                </Badge>\n              </Link>\n            )\n          })\n        } else {\n          return null\n        }\n      }\n    },\n    {\n      name: t(\"Apps\"),\n      center: false,\n      sortable: false,\n      wrap: true,\n      width: \"200px\",\n      cell: ({ appsName }) => {\n        if (appsName) {\n          return appsName.map((assignee, index) => {\n            const isLastBadge = appsName[appsName.length - 1] === index\n            return (\n              <Link\n                key={`${assignee}-${index}`}\n                to=\"/apps/app\"\n                className={classnames({ \"me-50\": !isLastBadge })}\n              >\n                <Badge\n                  pill\n                  color={colorsAssignee[assignee]}\n                  className=\"text-capitalize\"\n                >\n                  {assignee.replace(\"-\", \" \")}\n                </Badge>\n              </Link>\n            )\n          })\n        } else {\n          return null\n        }\n      }\n    },\n    {\n      name: t(\"Resources\"),\n      center: false,\n      sortable: false,\n      width: \"160px\",\n      selector: (row) => row.menuCount,\n      cell: (row) => {\n        return (\n          <>\n            <Link\n              key=\"table-field-count-menu\"\n              to=\"/apps/permission_menu\"\n              className=\"me-50\"\n            >\n              <Badge pill color=\"light-info\" className=\"text-capitalize\">\n                {row.menuCount} {t(\"Menu\")}\n              </Badge>\n            </Link>\n            <Link\n              key=\"table-field-count-endpoint\"\n              to=\"/apps/permission_endpoint\"\n            >\n              <Badge pill color=\"light-warning\" className=\"text-capitalize\">\n                {row.endpointCount} {t(\"Endpoint\")}\n              </Badge>\n            </Link>\n          </>\n        )\n      }\n    },\n    {\n      name: t(\"Actions\"),\n      center: true,\n      width: \"140px\",\n      cell: (row) => (\n        <GlobalActionsTable\n          row={row}\n          handleDelete={handleDelete}\n          handleEdit={handleAddEdit}\n          storeName={storeName}\n        />\n      )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: t(column.name),\n            ...column,\n            sortable: false,\n            cell: (row) =>\n              column.name === \"Actions\" ? (\n                <>\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    className=\"ms-2 me-1\"\n                    width={30}\n                    height={40}\n                  />\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    width={30}\n                    height={40}\n                  />\n                </>\n              ) : (\n                <Skeleton\n                  sx={{ bgcolor: colors.dark.light }}\n                  animation=\"wave\"\n                  width=\"100%\"\n                  height={40}\n                />\n              )\n          }))\n        : columns.map((column) => ({\n            name: t(column.name),\n            ...column\n          })),\n    [store.isLoading, columns]\n  )\n\n  const dataToRender = () => {\n    const filters = {\n      search: searchTerm\n    }\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  useEffect(() => {\n    if ((store.data.length === 0 || getAlwaysGrid) && !store.isLoading) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(\n        getDataList({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage,\n          ...filtersCustom\n        })\n      )\n    }\n    // console.log(store)\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              responsive\n              pagination\n              paginationServer\n              paginationTotalRows={store.total}\n              paginationComponent={CustomPagination}\n              selectableRows={deleteSelection}\n              onSelectedRowsChange={handleRowSelected}\n              selectableRowsHighlight\n              clearSelectedRows={toggleCleared}\n              selectableRowsComponent={BootstrapCheckbox}\n              noDataComponent={<NoDataDisplay />}\n              style={{ \"min-height\": \"400px\" }}\n              highlightOnHover\n              pointerOnHover\n              columns={tableColumns}\n              conditionalRowStyles={conditionalRowStyles}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  handleAddEdit={handleAddEdit}\n                  selectedRow={selectedRows}\n                  handleDeleteSelected={handleDeleteSelected}\n                  handleFiltersChange={handleFiltersChange}\n                  filtersCustomAdd={filtersCustomAdd}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={detailPage}\n          setFormState={setFormState}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n"],"sourceRoot":""}