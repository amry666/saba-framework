{"version":3,"sources":["../node_modules/flatpickr/dist/l10n/id.js","views/apps/unit_app/Table.js"],"names":["exports","fp","window","undefined","flatpickr","l10ns","Indonesian","weekdays","shorthand","longhand","months","firstDayOfWeek","ordinal","time_24hr","rangeSeparator","id","default","Object","defineProperty","value","factory","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","className","type","CustomHeader","store","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","searchTerm","selectedRow","handleDeleteSelected","t","useTranslation","ability","useContext","AbilityContext","dispatch","useDispatch","userData","useSelector","state","invoices","getUserData","xl","htmlFor","onChange","style","width","length","can","sessionStorage","getItem","color","onClick","pageTitle","e","target","caret","outline","getInvoice","rpt_name","output_type","dataYear","print","as_attachment","par_UNITKEY","par_SAMPLE","List","storeName","storeApp","apps_app","colors","ThemeColors","useState","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","selectedRows","setSelectedRows","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","setLoadingText","showModal","setShowModal","formState","setFormState","handleEdit","rowData","detailFromGrid","setDataById","then","data","isLoading","getDataListApp","res","getDataById","meta","requestStatus","toast","error","payload","message","padding","danger","main","border","iconTheme","primary","handleCloseModal","revivalBack","neutralizeBack","handleDelete","a","fire","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","success","countSelectedCopy","values","map","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","columns","dynamicColumns","column","name","columnName","sortField","fieldName","center","sortable","selector","row","cell","field","dataFormat","includes","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","domain","href","app_logo","img","height","imgHeight","imgWidth","initials","content","app_name","unit_logo","unit_name","attributes","app_name_alias","description","tableColumns","useMemo","sx","bgcolor","dark","light","animation","useEffect","getAlwaysGrid","blocking","loader","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","count","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","keys","some","k","Array","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","show","setShow","detailPage"],"mappings":"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","file":"static/js/135.d3c9b43e.chunk.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.id = {}));\n}(this, function (exports) { 'use strict';\n\n  var fp = typeof window !== \"undefined\" && window.flatpickr !== undefined\n      ? window.flatpickr\n      : {\n          l10ns: {}\n      };\n  var Indonesian = {\n      weekdays: {\n          shorthand: [\"Min\", \"Sen\", \"Sel\", \"Rab\", \"Kam\", \"Jum\", \"Sab\"],\n          longhand: [\"Minggu\", \"Senin\", \"Selasa\", \"Rabu\", \"Kamis\", \"Jumat\", \"Sabtu\"]\n      },\n      months: {\n          shorthand: [\n              \"Jan\",\n              \"Feb\",\n              \"Mar\",\n              \"Apr\",\n              \"Mei\",\n              \"Jun\",\n              \"Jul\",\n              \"Agu\",\n              \"Sep\",\n              \"Okt\",\n              \"Nov\",\n              \"Des\",\n          ],\n          longhand: [\n              \"Januari\",\n              \"Februari\",\n              \"Maret\",\n              \"April\",\n              \"Mei\",\n              \"Juni\",\n              \"Juli\",\n              \"Agustus\",\n              \"September\",\n              \"Oktober\",\n              \"November\",\n              \"Desember\",\n          ]\n      },\n      firstDayOfWeek: 1,\n      ordinal: function () {\n          return \"\";\n      },\n      time_24hr: true,\n      rangeSeparator: \" - \"\n  };\n  fp.l10ns.id = Indonesian;\n  var id = fp.l10ns;\n\n  exports.Indonesian = Indonesian;\n  exports.default = id;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef\n} from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  deleteData,\n  deleteSelectedRowData\n} from \"./store\"\nimport { getDataList as getDataListApp } from \"../app/store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\n\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Button,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  CardText\n} from \"reactstrap\"\n\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\n\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport Avatar from \"@components/avatar\"\nimport { Link } from \"react-router-dom\"\nconst MySwal = withReactContent(Swal)\n\n// ** Bootstrap Checkbox Component\nconst BootstrapCheckbox = forwardRef((props, ref) => (\n  <div className=\"form-check\">\n    <Input type=\"checkbox\" ref={ref} {...props} />\n  </div>\n))\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  toggleSidebar,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm,\n  selectedRow,\n  handleDeleteSelected\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const storeInvoice = useSelector((state) => state.invoices)\n  const userData = getUserData()\n\n  return (\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\n      <Row>\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\n          <div className=\"d-flex align-items-center w-100\">\n            <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n            <Input\n              className=\"mx-50\"\n              type=\"select\"\n              id=\"rows-per-page\"\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{ width: \"5rem\" }}\n            >\n              <option value=\"10\">10</option>\n              <option value=\"25\">25</option>\n              <option value=\"50\">50</option>\n            </Input>\n            <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n          </div>\n        </Col>\n        <Col\n          xl=\"8\"\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\n        >\n          {selectedRow?.length > 0 &&\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) ? (\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n              <Button\n                className=\"delete-users\"\n                color=\"danger\"\n                onClick={handleDeleteSelected}\n              >\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\n              </Button>\n            </div>\n          ) : null}\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n\n          <div className=\"d-flex align-items-center table-header-actions\">\n            <UncontrolledDropdown className=\"me-1\">\n              <DropdownToggle color=\"secondary\" caret outline>\n                <Share className=\"font-small-4 me-50\" />\n                <span className=\"align-middle\">{t(\"Export\")}</span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"pdf\",\n                        dataYear: userData.dataYear,\n                        print: true,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <Printer className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">{t(\"Print\")}</span>\n                </DropdownItem>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"pdf\",\n                        dataYear: userData.dataYear,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <File className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">PDF</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"xls\",\n                        dataYear: userData.dataYear,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <Grid className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Excel</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  className=\"w-100\"\n                  // onClick={() => downloadCSV(store.data)}\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"csv\",\n                        dataYear: userData.dataYear,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <FileText className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">CSV</span>\n                </DropdownItem>\n\n                {/* <DropdownItem className=\"w-100\">\n                  <Copy className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Copy</span>\n                </DropdownItem> */}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n\n            {ability.can(\n              \"post\",\n              sessionStorage.getItem(\"current_page_perm\")\n            ) ? (\n              <Button\n                className=\"add-new-user\"\n                color=\"primary\"\n                onClick={toggleSidebar}\n                // onClick={handleAdd}\n              >\n                {t(\"Add New\")} {t(pageTitle)}\n              </Button>\n            ) : null}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst List = () => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const storeApp = useSelector((state) => state.apps_app)\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const { colors } = useContext(ThemeColors)\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [selectedRows, setSelectedRows] = useState([])\n  const [toggleCleared, setToggleCleared] = useState(false)\n\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n\n  const handleEdit = (rowData) => {\n    setFormState(\"edit\")\n    if (!detailFromGrid) {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(getDataById(rowData.id)).then((res) => {\n        if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    } else {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(setDataById(rowData)).then(() => {\n        if (storeApp.data.length === 0 && !storeApp.isLoading) {\n          dispatch(getDataListApp({})).then((res) => {\n            setLoading(false)\n            setShowModal(true)\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    // console.log(\"here\")\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const handleDeleteSelected = async () => {\n    const countSelectedCopy = selectedRows.length\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\n        \"selected data. Deleted data cannot be recovered\"\n      )}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\n        pageTitle\n      )}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\n      )\n      setLoading(true)\n      const values = selectedRows.map((a) => a.id)\n      // console.log(values)\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setSelectedRows([])\n          setToggleCleared(!toggleCleared)\n          setLoading(false)\n          toast.success(\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\n            {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            }\n          )\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /////PAGINATION SERVERSIDE\n  const handlePagination = (page) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  const handleDebounceFn = (inputValue) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        search: inputValue,\n        sort,\n        page: currentPage,\n        length: rowsPerPage\n      })\n    )\n  }\n\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\n\n  const handleFilter = (event) => {\n    setSearchTerm(event)\n    debounceFn(event)\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage\n      })\n    )\n  }\n\n  const handleRowSelected = useCallback((state) => {\n    setSelectedRows(state.selectedRows)\n  }, [])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const renderCell = (row, column) => {\n    const field = row[column.fieldName]\n    const dataFormat = column.dataFormat\n    if (dataFormat) {\n      if (dataFormat.includes(\":\")) {\n        const columnTypeFormat = dataFormat.split(\":\")\n        const columnType = columnTypeFormat[0]\n        const columnFormat = columnTypeFormat[1]\n        let columnFormated = row[column.fieldName]\n        if (columnType === \"date\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        if (columnType === \"datetime\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        return columnFormated\n      }\n    }\n    return row[column.fieldName]\n  }\n\n  const columns = [\n    ...store.dynamicColumns.map((column) => ({\n      name: column.columnName,\n      sortField: column.fieldName,\n      center: false,\n      sortable: true,\n      selector: (row) => row[column.fieldName],\n      cell: (row) => renderCell(row, column)\n    })),\n    {\n      name: t(\"Domain\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row.domain,\n      cell: (row) => (\n        <a target=\"_blank\" href={row.domain} title={row.domain}>\n          {row.domain}\n        </a>\n      )\n    },\n    {\n      name: t(\"App\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row?.app_logo,\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row?.app_logo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.app_logo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"25\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : (\n            <Avatar\n              initials\n              className=\"me-1\"\n              // color={row.avatarColor}\n              content={row?.app_name ?? \"\"}\n            />\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row.app_name}</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"Unit\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row?.unit_logo,\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row?.unit_logo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.unit_logo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"30\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : (\n            <Avatar\n              color={\"light-primary\"}\n              initials\n              className=\"me-1\"\n              content={row?.unit_name ?? \"\"}\n            />\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row?.unit_name}</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"App Alias\"),\n      sortField: \"attributes\",\n      center: false,\n      sortable: false,\n      selector: (row) => row.attributes?.app_name_alias,\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row.attributes?.app_logo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.app_logo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"30\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : (\n            row?.attributes?.app_logo && (\n              <Avatar\n                initials\n                className=\"me-1\"\n                width=\"32\"\n                height=\"32\"\n                imgHeight=\"30\"\n                imgWidth=\"30\"\n                color={\"light-primary\"}\n                content={row?.attributes?.app_name_alias ?? \"\"}\n              />\n            )\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row.attributes?.app_name_alias}</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"Description\"),\n      sortField: \"description\",\n      center: false,\n      sortable: false,\n      selector: (row) => row.attributes?.app_name_alias,\n      cell: (row) => row.description\n    },\n    {\n      name: t(\"Actions\"),\n      center: true,\n      width: \"140px\",\n      cell: (row) => (\n        <GlobalActionsTable\n          row={row}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n        />\n      )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: t(column.name),\n            ...column,\n            sortable: false,\n            cell: (row) =>\n              column.name === \"Actions\" ? (\n                <>\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    className=\"ms-2 me-1\"\n                    width={30}\n                    height={40}\n                  />\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    width={30}\n                    height={40}\n                  />\n                </>\n              ) : (\n                <Skeleton\n                  sx={{ bgcolor: colors.dark.light }}\n                  animation=\"wave\"\n                  width=\"100%\"\n                  height={40}\n                />\n              )\n          }))\n        : columns.map((column) => ({\n            name: t(column.name),\n            ...column\n          })),\n    [store.isLoading, columns]\n  )\n\n  const dataToRender = () => {\n    const filters = {\n      search: searchTerm\n    }\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(\n        getDataList({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage\n        })\n      )\n    }\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              responsive\n              pagination\n              paginationServer\n              paginationTotalRows={store.total}\n              paginationComponent={CustomPagination}\n              selectableRows\n              onSelectedRowsChange={handleRowSelected}\n              selectableRowsHighlight\n              // onRowClicked={handleRowSelected}\n              clearSelectedRows={toggleCleared}\n              selectableRowsComponent={BootstrapCheckbox}\n              noDataComponent={<NoDataDisplay />}\n              // fixedHeader\n              // fixedHeaderScrollHeight=\"600px\"\n              style={{ \"min-height\": \"400px\" }}\n              highlightOnHover\n              pointerOnHover\n              columns={tableColumns}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  toggleSidebar={toggleSidebar}\n                  selectedRow={selectedRows}\n                  handleDeleteSelected={handleDeleteSelected}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={false}\n          setFormState={setFormState}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n"],"sourceRoot":""}