{"version":3,"sources":["assets/images/portrait/small/avatar-s-7.jpg","views/dashboard/widgets/WidgetLeaveNeedApproval.js"],"names":["params","pagination","clickable","autoplay","delay","disableOnInteraction","WidgetLeaveNeedApproval","t","useTranslation","store","useSelector","state","dynamicStore","dispatch","dynamic_temp_state","useDispatch","colors","useContext","ThemeColors","useState","loadingPostPut","setLoadingPostPut","loadingDelete","setLoadingDelete","loadingText","setLoadingText","storeName","endpointName","useEffect","pageData","data","length","isLoading","getDataList","baseUrl","errorToast","res","errorFieldsMsg","payload","error","errors","errorFields","errorx","toast","message","style","padding","color","danger","main","border","iconTheme","primary","putDataToApi","id","putDataWidget","then","meta","requestStatus","xxx","success","x","xx","setTimeout","getDataListMyActivity","catch","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","lg","xs","minHeight","className","tag","blocking","loader","pill","map","row","imgClassName","img","Employee_PhotoPath","require","default","imgHeight","imgWidth","Employee_Name","Employee_EmployeeIdNumber","LeaveName","Reason","calendar","StartDate","EndDate","Ripple","size","type","onClick","e","preventDefault","Id_LeaveState"],"mappings":"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","file":"static/js/137.6e056d3d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar-s-7.ba3f6823.jpg\";","import Avatar from \"@components/avatar\"\nimport AvatarGroup from \"@components/avatar-group\"\nimport { Calendar, MapPin, Video } from \"react-feather\"\nimport {\n  Col,\n  Card,\n  CardTitle,\n  CardBody,\n  CardText,\n  CardHeader,\n  CardFooter,\n  Button,\n  Spinner,\n  Badge\n} from \"reactstrap\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport illustration from \"@src/assets/images/illustration/email.svg\"\nimport { Fragment, useEffect, useMemo, useContext, useState } from \"react\"\nimport UILoader from \"@components/ui-loader\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport Moment from \"react-moment\"\nimport \"moment-timezone\"\nimport \"moment/locale/id\"\nimport { putDataWidget, getDataList } from \"@src/shared/dynamic_pages/store\"\n\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\"\nimport EventAvailableOutlinedIcon from \"@mui/icons-material/EventAvailableOutlined\"\nimport toast from \"react-hot-toast\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { getDataList as getDataListMyActivity } from \"@src/views/my-info/store/my_activities\"\nimport InsertInvitationOutlinedIcon from \"@mui/icons-material/InsertInvitationOutlined\"\n\nimport profileImg from \"@src/assets/images/portrait/small/avatar-s-7.jpg\"\n\nconst params = {\n  // navigation: true\n  pagination: {\n    clickable: true\n  },\n  autoplay: {\n    delay: 10000,\n    disableOnInteraction: false\n  }\n}\n\nconst WidgetLeaveNeedApproval = () => {\n  const { t } = useTranslation()\n  // const store = useSelector((state) => state[storeName])\n  const store = useSelector((state) => state.dynamicStore)\n  const dynamicTempState = useSelector((state) => state.dynamic_temp_state)\n  const dispatch = useDispatch()\n\n  const { colors } = useContext(ThemeColors)\n  const [loading, setLoading] = useState(false)\n  const [loadingPostPut, setLoadingPostPut] = useState(false)\n  const [loadingDelete, setLoadingDelete] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n\n  const storeName = \"Leave_needApproval\"\n  const endpointName = \"Leave/await\"\n\n  useEffect(() => {\n    if (\n      !store.pageData[storeName] ||\n      (store.pageData[storeName]?.data?.length === 0 &&\n        !store.pageData[storeName]?.isLoading)\n    ) {\n      dispatch(\n        getDataList({\n          storeName: storeName,\n          endpointName: endpointName,\n          baseUrl: \"hr\"\n        })\n      )\n    }\n  }, [])\n\n  const errorToast = (res) => {\n    let errorFieldsMsg = \"\"\n    if (res?.payload?.error?.errors) {\n      const errorFields = res?.payload?.error?.errors\n      for (let errorx in res?.payload?.error?.errors) {\n        errorFieldsMsg = `${errorFieldsMsg} - ${errorFields[errorx]}\\n`\n        // console.log(errorx, errorFields[errorx])\n      }\n    }\n    return toast.error(\n      `${res.payload?.error?.message} \\n \\n ${errorFieldsMsg}`,\n      {\n        style: {\n          padding: \"16px\",\n          color: colors.danger.main,\n          border: `1px solid ${colors.danger.main}`\n        },\n        iconTheme: {\n          primary: colors.danger.main\n        }\n      }\n    )\n  }\n\n  const putDataToApi = (data) => {\n    setLoadingText(\"Confirming Leave Request\")\n    data[\"storeName\"] = storeName\n    data[\"endpointName\"] = `Leave/${data.id}`\n    data[\"baseUrl\"] = \"hr\"\n    delete data.id\n    // data[\"callback_page\"] = window.location.href\n    dispatch(putDataWidget(data))\n      .then((res) => {\n        if (res.meta.requestStatus === \"fulfilled\") {\n          dispatch(\n            getDataList({\n              storeName: storeName,\n              endpointName: endpointName,\n              baseUrl: \"hr\"\n            })\n          )\n            .then((xxx) => {\n              toast.success(`${t(\"Successfully Confirming Leave Request\")}}`, {\n                style: {\n                  padding: \"16px\",\n                  color: colors.success.main,\n                  border: `1px solid ${colors.success.main}`\n                },\n                iconTheme: {\n                  primary: colors.success.main\n                }\n              })\n            })\n            .then((x) => {\n              setLoadingPostPut(false)\n              setLoadingDelete(false)\n            })\n            .then((xx) => {\n              dispatch(\n                getDataList({\n                  storeName: \"hr_leave\",\n                  endpointName: \"Leave\",\n                  baseUrl: \"hr\"\n                })\n              )\n              setTimeout(() => {\n                dispatch(getDataListMyActivity({}))\n              }, 8000)\n            })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          errorToast(res)\n        }\n      })\n      .catch((error) => {\n        // console.error(error)\n        setLoadingPostPut(false)\n        errorToast(error)\n      })\n  }\n\n  const calendarStrings = {\n    lastDay: \"[Yesterday]\",\n    sameDay: \"[Today]\",\n    nextDay: \"[Tomorrow]\",\n    lastWeek: \"[last] dddd\",\n    nextWeek: \"dddd\",\n    sameElse: \"L\"\n  }\n\n  return store.pageData[storeName]?.isLoading ? (\n    <Col lg=\"12\" xs=\"12\">\n      <Card style={{ minHeight: \"200px\" }}>\n        <CardHeader>\n          <div className=\"d-flex align-items-center\">\n            <InsertInvitationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\n            <CardTitle tag=\"h4\">{t(\"Leave Need Approval\")}</CardTitle>\n          </div>\n        </CardHeader>\n        <UILoader blocking={true} loader={<Loader />}>\n          <CardBody></CardBody>\n        </UILoader>\n      </Card>\n    </Col>\n  ) : store.pageData[storeName]?.data?.length > 0 ? (\n    <Col lg=\"12\" xs=\"12\">\n      <Card>\n        <CardHeader>\n          <div className=\"d-flex align-items-center\">\n            <InsertInvitationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\n            <CardTitle tag=\"h4\">{t(\"Leave Need Approval\")}</CardTitle>\n            {store.pageData[storeName]?.data?.length > 1 && (\n              <Badge className=\"ms-1\" tag=\"div\" color=\"danger\" pill>\n                {store.pageData[storeName]?.data?.length}\n              </Badge>\n            )}\n          </div>\n        </CardHeader>\n\n        <CardBody className=\"px-0 pb-0\">\n          <Swiper {...params}>\n            {store.pageData[storeName]?.data.map((row) => {\n              return (\n                <SwiperSlide key={`swiper_${row.id}`}>\n                  <Card className=\"card-apply-job mb-0\">\n                    <CardBody>\n                      <div className=\"d-flex justify-content-between align-items-center mb-1\">\n                        <div className=\"d-flex align-items-center\">\n                          <Avatar\n                            imgClassName=\"rounded\"\n                            className=\"me-75\"\n                            img={\n                              row?.Employee_PhotoPath ??\n                              require(\"@src/assets/images/avatars/avatar-blank.png\")\n                                .default\n                            }\n                            imgHeight=\"42\"\n                            imgWidth=\"42\"\n                          />\n                          <div className=\"my-auto\">\n                            <h6 className=\"mb-0\">{`${row?.Employee_Name}`}</h6>\n                            <small className=\"text-muted\">\n                              {row?.Employee_EmployeeIdNumber}\n                            </small>\n                          </div>\n                        </div>\n                        <Badge color=\"light-primary\" pill>\n                          {row?.LeaveName}\n                        </Badge>\n                      </div>\n                      <h5 className=\"apply-job-title\">\n                        {t(\n                          \"New request for leave from staff that needs to be confirmed.\"\n                        )}\n                      </h5>\n                      <CardText className=\"mb-2\">\n                        {t(\"Reason\")} : {row?.Reason}.\n                      </CardText>\n                      <div className=\"apply-job-package bg-light-primary rounded\">\n                        <div>\n                          <sup className=\"text-body\">\n                            <small>{t(\"period\")} </small>\n                          </sup>\n                          <h2 className=\"d-inline me-25\">\n                            {\n                              <Moment calendar={calendarStrings}>\n                                {row?.StartDate}\n                              </Moment>\n                            }{\" \"}\n                            <sub className=\"text-body\">\n                              <small> {t(\"until\")}</small>\n                            </sub>{\" \"}\n                            {\n                              <Moment calendar={calendarStrings}>\n                                {row?.EndDate}\n                              </Moment>\n                            }\n                          </h2>\n                          {/* <sub className=\"text-body\">\n                              <small>/ month</small>\n                            </sub> */}\n                        </div>\n                        {/* <Badge color=\"light-primary\" pill>\n                            Full Time\n                          </Badge> */}\n                      </div>\n                      <div className=\"text-end\">\n                        {!loadingPostPut &&\n                          (!loadingDelete ? (\n                            <Button.Ripple\n                              color=\"flat-danger me-1\"\n                              onClick={(e) => {\n                                e.preventDefault()\n                                setLoadingDelete(true)\n                                putDataToApi({\n                                  id: row?.id,\n                                  Id_LeaveState: \"3\"\n                                })\n                              }}\n                            >\n                              {t(\"Decline\")}\n                            </Button.Ripple>\n                          ) : (\n                            <Button.Ripple color=\"flat-danger me-1\">\n                              <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                              <span className=\"ms-50\">{loadingText}</span>\n                            </Button.Ripple>\n                          ))}\n\n                        {!loadingDelete &&\n                          (!loadingPostPut ? (\n                            <Button.Ripple\n                              onClick={(e) => {\n                                e.preventDefault()\n                                setLoadingPostPut(true)\n                                putDataToApi({\n                                  id: row?.id,\n                                  Id_LeaveState: \"2\"\n                                })\n                              }}\n                              color=\"gradient-primary\"\n                            >\n                              {t(\"Confirm\")}\n                            </Button.Ripple>\n                          ) : (\n                            <Button.Ripple color=\"gradient-primary\">\n                              <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                              <span className=\"ms-50\">{loadingText}</span>\n                            </Button.Ripple>\n                          ))}\n                      </div>\n                    </CardBody>\n                  </Card>\n                </SwiperSlide>\n              )\n            })}\n          </Swiper>\n        </CardBody>\n      </Card>\n    </Col>\n  ) : null\n}\n\nexport default WidgetLeaveNeedApproval\n"],"sourceRoot":""}