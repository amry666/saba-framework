{"version":3,"sources":["../node_modules/@mui/icons-material/AssignmentIndOutlined.js","views/dashboard/widgets/WidgetTrainingAssignedForMe.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","axiosHR","useJwt","ssoAxiosInterceptor","hrAxiosInterceptor","params","pagination","clickable","autoplay","delay","disableOnInteraction","slideToClickedSlide","WidgetTrainingAssignedForMe","t","useTranslation","store","useSelector","state","dynamicStore","dynamicTempState","dynamic_temp_state","dispatch","useDispatch","navigate","useNavigate","storeName","endpointName","colors","useContext","ThemeColors","useState","loadingPostPut","setLoadingPostPut","loadingText","setLoadingText","loadingGetManager","setLoadingGetManager","managerData","setManagerData","managerDataSelected","setManagerDataSelected","isOpen","setIsOpen","toggle","errorToast","res","errorFieldsMsg","payload","error","errors","errorFields","errorx","toast","message","style","padding","color","danger","main","border","iconTheme","primary","getManager","a","storeInputName","data","get","then","setDataCache","useEffect","pageData","length","isLoading","getDataList","baseUrl","type","Id_AttendingState","renderAvatarImgIcon","Option","components","SingleValue","props","src","img","height","width","borderRadius","marginRight","label","position","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","colorsBadge","toUpperCaseFilter","toUpperCase","lg","xs","minHeight","className","tag","blocking","loader","isManager","pill","map","row","TrainingData","Image","illustration","filter","format","StartDate","Name","Description","icon","size","calendar","IsOnline","LinkRef","Address","FunctionalPosition","rowx","i","name","sm","Ripple","onClick","e","Id_Training","md","placeholder","theme","selectThemeColors","classNamePrefix","onChange","options","item","Employee_Name","Id_Employee","Employee_PhotoPath","PositionName","isClearable","disabled","preventDefault","id","manager_id","window","location","href","postDataWidget","meta","requestStatus","xxx","success","xx","setTimeout","getDataListMyActivity","catch","outline"],"mappings":"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","file":"static/js/138.ae26c328.chunk.js","sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 3h-4.18C14.4 1.84 13.3 1 12 1s-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.22 0 .41.1.55.25.12.13.2.31.2.5 0 .41-.34.75-.75.75s-.75-.34-.75-.75c0-.19.08-.37.2-.5.14-.15.33-.25.55-.25zM19 19H5V5h14v14zM12 6c-1.65 0-3 1.35-3 3s1.35 3 3 3 3-1.35 3-3-1.35-3-3-3zm0 4c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-6 6.47V18h12v-1.53c0-2.5-3.97-3.58-6-3.58s-6 1.07-6 3.58zM8.31 16c.69-.56 2.38-1.12 3.69-1.12s3.01.56 3.69 1.12H8.31z\"\n}), 'AssignmentIndOutlined');\nexports.default = _default;","import Avatar from \"@components/avatar\"\nimport UILoader from \"@components/ui-loader\"\nimport illustration from \"@src/assets/images/illustration/email.svg\"\nimport { Loader } from \"@src/shared/CommonComponents\"\nimport { getDataList, postDataWidget } from \"@src/shared/dynamic_pages/store\"\nimport \"moment-timezone\"\nimport \"moment/locale/id\"\nimport { useContext, useEffect, useState } from \"react\"\nimport { Calendar, Crosshair, MapPin, Video } from \"react-feather\"\nimport { useTranslation } from \"react-i18next\"\nimport Moment from \"react-moment\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useNavigate } from \"react-router-dom\"\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardText,\n  CardTitle,\n  Col,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Spinner\n} from \"reactstrap\"\n\nimport AssignmentIndOutlinedIcon from \"@mui/icons-material/AssignmentIndOutlined\"\nimport CastForEducationOutlinedIcon from \"@mui/icons-material/CastForEducationOutlined\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { getDataList as getDataListMyActivity } from \"@src/views/my-info/store/my_activities\"\nimport { setDataCache } from \"@store/dynamicTempState\"\nimport { selectThemeColors } from \"@utils\"\nimport toast from \"react-hot-toast\"\nimport Select, { components } from \"react-select\"\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\"\n\nimport useJwt from \"@src/auth/jwt/useJwt\"\n\nconst axiosSso = useJwt.ssoAxiosInterceptor\nconst axiosHR = useJwt.hrAxiosInterceptor\n\nconst params = {\n  // navigation: true\n  pagination: {\n    clickable: true\n  },\n  autoplay: {\n    delay: 5500,\n    disableOnInteraction: false\n  },\n  slideToClickedSlide: true\n}\n\nconst WidgetTrainingAssignedForMe = () => {\n  const { t } = useTranslation()\n  // const store = useSelector((state) => state[storeName])\n  const store = useSelector((state) => state.dynamicStore)\n  const dynamicTempState = useSelector((state) => state.dynamic_temp_state)\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const storeName = \"TrainingEmployee_assignForMe\"\n  const endpointName = \"TrainingEmployee/assignment\"\n  const { colors } = useContext(ThemeColors)\n  const [loading, setLoading] = useState(true)\n  const [loadingPostPut, setLoadingPostPut] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n\n  const [loadingGetManager, setLoadingGetManager] = useState(false)\n  const [managerData, setManagerData] = useState([])\n  const [managerDataSelected, setManagerDataSelected] = useState(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const toggle = () => {\n    setIsOpen(!isOpen)\n  }\n\n  const errorToast = (res) => {\n    let errorFieldsMsg = \"\"\n    if (res?.payload?.error?.errors) {\n      const errorFields = res?.payload?.error?.errors\n      for (let errorx in res?.payload?.error?.errors) {\n        errorFieldsMsg = `${errorFieldsMsg} - ${errorFields[errorx]}\\n`\n        // console.log(errorx, errorFields[errorx])\n      }\n    }\n    return toast.error(\n      `${res.payload?.error?.message} \\n \\n ${errorFieldsMsg}`,\n      {\n        style: {\n          padding: \"16px\",\n          color: colors.danger.main,\n          border: `1px solid ${colors.danger.main}`\n        },\n        iconTheme: {\n          primary: colors.danger.main\n        }\n      }\n    )\n  }\n\n  const postDataToApi = (data) => {\n    setLoadingPostPut(true)\n    setLoadingText(\"Sending Training Request to Manager\")\n    data[\"storeName\"] = storeName\n    data[\"endpointName\"] = endpointName\n    data[\"baseUrl\"] = \"hr\"\n    data[\"callback_page\"] = window.location.href\n    dispatch(postDataWidget(data))\n      .then((res) => {\n        if (res.meta.requestStatus === \"fulfilled\") {\n          dispatch(\n            getDataList({\n              storeName: storeName,\n              endpointName: endpointName,\n              baseUrl: \"hr\",\n              type: \"for_me\",\n              Id_AttendingState: 0\n            })\n          )\n            .then((xxx) => {\n              setLoadingPostPut(false)\n              toggle()\n              toast.success(\n                `${t(\"Successfully Sending Training Request to Manager\")}}`,\n                {\n                  style: {\n                    padding: \"16px\",\n                    color: colors.success.main,\n                    border: `1px solid ${colors.success.main}`\n                  },\n                  iconTheme: {\n                    primary: colors.success.main\n                  }\n                }\n              )\n            })\n            .then((xx) => {\n              dispatch(\n                getDataList({\n                  storeName: \"TrainingEmployee_assignToMe\",\n                  endpointName: \"TrainingEmployee/assignment\",\n                  baseUrl: \"hr\",\n                  type: \"to_me\",\n                  Id_AttendingState: 1\n                })\n              )\n              setTimeout(() => {\n                dispatch(getDataListMyActivity({}))\n              }, 8000)\n            })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoadingPostPut(false)\n          errorToast(res)\n        }\n      })\n      .catch((error) => {\n        // console.error(error)\n        setLoadingPostPut(false)\n        errorToast(error)\n      })\n  }\n\n  const getManager = async () => {\n    toggle()\n\n    const storeInputName = \"Id_Manager\"\n    if (!dynamicTempState.data[storeInputName] && !loadingGetManager) {\n      setLoadingGetManager(true)\n      const finUrl = \"DepartmentManager\"\n      await axiosHR.get(finUrl).then((res) => {\n        // console.log(res)\n        const data = res?.data?.data\n        setManagerData(data)\n        setLoadingGetManager(false)\n        dispatch(setDataCache({ [storeInputName]: data }))\n      })\n    } else {\n      setLoadingGetManager(true)\n      setManagerData(dynamicTempState.data[storeInputName])\n      setLoadingGetManager(false)\n    }\n  }\n\n  useEffect(() => {\n    if (\n      !store.pageData[storeName] ||\n      (store.pageData[storeName]?.data?.length === 0 &&\n        !store.pageData[storeName]?.isLoading)\n    ) {\n      dispatch(\n        getDataList({\n          storeName: storeName,\n          endpointName: endpointName,\n          baseUrl: \"hr\",\n          type: \"for_me\",\n          Id_AttendingState: 0\n        })\n      )\n    }\n  }, [])\n\n  const renderAvatarImgIcon = (data) => {\n    let componentsInput = {}\n    const { Option, SingleValue } = components\n    const IconOption = (props) => (\n      <Option {...props}>\n        <img\n          src={props.data.img}\n          style={{\n            height: \"30px\",\n            width: \"30px\",\n            borderRadius: \"10%\",\n            marginRight: \"10px\"\n          }}\n        />\n        {props.data.label} <small>({props.data.position})</small>\n      </Option>\n    )\n\n    const IconSingleValue = (props) => (\n      <SingleValue {...props}>\n        <img\n          src={props.data.img}\n          style={{\n            height: \"30px\",\n            width: \"30px\",\n            borderRadius: \"10%\",\n            marginRight: \"10px\"\n          }}\n        />\n        {props.data.label} <small>({props.data.position})</small>\n      </SingleValue>\n    )\n\n    componentsInput = {\n      components: {\n        SingleValue: IconSingleValue,\n        Option: IconOption\n      }\n    }\n\n    return componentsInput\n  }\n\n  const calendarStrings = {\n    lastDay: \"[Yesterday]\",\n    sameDay: \"[Today]\",\n    nextDay: \"[Tomorrow]\",\n    lastWeek: \"[last] dddd\",\n    nextWeek: \"dddd\",\n    sameElse: \"L\"\n  }\n\n  const colorsBadge = [\n    \"primary\",\n    \"success\",\n    \"danger\",\n    \"warning\",\n    \"info\",\n    \"secondary\"\n  ]\n\n  const toUpperCaseFilter = (d) => {\n    return d.toUpperCase()\n  }\n\n  {\n    return store.pageData[storeName]?.isLoading ? (\n      <Col lg=\"12\" xs=\"12\">\n        <Card style={{ minHeight: \"200px\" }}>\n          <CardHeader>\n            <div className=\"d-flex align-items-center\">\n              <CastForEducationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\n              <CardTitle tag=\"h4\">{t(\"Recommended Training\")}</CardTitle>\n            </div>\n          </CardHeader>\n          <UILoader blocking={true} loader={<Loader />}>\n            <CardBody></CardBody>\n          </UILoader>\n        </Card>\n      </Col>\n    ) : store.pageData[storeName]?.data?.length > 0 ? (\n      <Col lg=\"12\" xs=\"12\">\n        <Card>\n          <CardHeader>\n            <div className=\"d-flex align-items-center\">\n              <CastForEducationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\n              <CardTitle tag=\"h4\">\n                {!store.pageData[storeName]?.data[0]?.isManager\n                  ? t(\"Recommended Training For You\")\n                  : t(\"Recommended Training For Your Staff\")}\n              </CardTitle>\n              {store.pageData[storeName]?.data?.length > 1 && (\n                <Badge className=\"ms-1\" tag=\"div\" color=\"info\" pill>\n                  {store.pageData[storeName]?.data?.length}\n                </Badge>\n              )}\n            </div>\n          </CardHeader>\n          <CardBody className=\"px-0 pb-0\">\n            <Swiper {...params}>\n              {store.pageData[storeName]?.data.map((row) => {\n                return (\n                  <SwiperSlide key={`swiper_${row.id}`}>\n                    <Card className=\"card-developer-meetup cursor-pointer\">\n                      <div className=\"meetup-img-wrapper rounded-top text-center\">\n                        <img\n                          src={\n                            row?.TrainingData?.Image\n                              ? row.TrainingData.Image\n                              : illustration\n                          }\n                          height=\"170\"\n                        />\n                      </div>\n                      <CardBody>\n                        <div className=\"meetup-header d-flex align-items-center\">\n                          <div className=\"meetup-day\">\n                            <h6 className=\"mb-0\">\n                              <Moment filter={toUpperCaseFilter} format=\"ddd\">\n                                {row?.TrainingData?.StartDate}\n                              </Moment>\n                            </h6>\n                            <h3 className=\"mb-0\">\n                              <Moment format=\"DD\">\n                                {row?.TrainingData?.StartDate}\n                              </Moment>\n                            </h3>\n                          </div>\n                          <div className=\"my-auto text-truncate\">\n                            <CardTitle tag=\"h4\" className=\"mb-25\">\n                              {row?.TrainingData?.Name}\n                            </CardTitle>\n                            <CardText className=\"mb-0\">\n                              {row?.TrainingData?.Description}\n                            </CardText>\n                          </div>\n                        </div>\n                        <div className=\"d-flex\">\n                          <Avatar\n                            color=\"light-primary\"\n                            className=\"rounded me-1\"\n                            icon={<Calendar size={18} />}\n                          />\n                          <div>\n                            {/* <h6 className=\"mb-0\">Sat, May 25, 2020</h6>\n                    <small>10:AM to 6:PM</small> */}\n                            <h6 className=\"mb-0\">\n                              {\n                                <Moment calendar={calendarStrings}>\n                                  {row?.TrainingData?.StartDate}\n                                </Moment>\n                              }\n                            </h6>\n                            <small>\n                              {\n                                <Moment format=\"[Start at] LT\">\n                                  {row?.TrainingData?.StartDate}\n                                </Moment>\n                              }\n                            </small>\n                          </div>\n                        </div>\n                        {!row?.TrainingData?.IsOnline ? (\n                          <div className=\"d-flex mt-2\">\n                            <Avatar\n                              color=\"light-primary\"\n                              className=\"rounded me-1\"\n                              icon={<MapPin size={18} />}\n                            />\n                            <div className=\"align-items-center align-middle my-auto\">\n                              {/* <h6 className=\"mb-0\">Central Park</h6> */}\n                              <small>{row?.TrainingData?.Address}</small>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"d-flex mt-2\">\n                            <Avatar\n                              color=\"light-primary\"\n                              className=\"rounded me-1\"\n                              icon={<Video size={18} />}\n                            />\n                            <div className=\"align-items-center align-middle my-auto\">\n                              <h6 className=\"mb-0\">{t(\"Online Training\")}</h6>\n                              {row?.TrainingData?.LinkRef && (\n                                <small>\n                                  {row?.TrainingData?.LinkRef\n                                    ? row?.TrainingData?.LinkRef\n                                    : \"The link will be sent before the event starts\"}\n                                </small>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                        {row?.FunctionalPosition && (\n                          <div className=\"d-flex mt-2\">\n                            <Avatar\n                              color=\"light-primary\"\n                              className=\"rounded me-1\"\n                              icon={<Crosshair size={18} />}\n                            />\n                            <div className=\"align-items-center align-middle my-auto\">\n                              {row.FunctionalPosition.map((rowx, i) => {\n                                return (\n                                  <Badge\n                                    key={`badge_${i}`}\n                                    color={`light-${\n                                      colorsBadge[i] ?? \"primary\"\n                                    }`}\n                                  >\n                                    {rowx?.name}\n                                  </Badge>\n                                )\n                              })}\n                            </div>\n                          </div>\n                        )}\n                        {/* <AvatarGroup data={data} /> */}\n                        {!row?.isManager ? (\n                          <Col className=\"d-grid mt-2\" sm=\"12\">\n                            <Button.Ripple\n                              onClick={getManager}\n                              color=\"gradient-primary\"\n                            >\n                              {t(\"Follow\")}\n                            </Button.Ripple>\n                            {/* <Collapse isOpen={isOpen}>\n                              <Alert color=\"primary\">\n                                <div className=\"alert-body\">\n                                  <Info size={15} />\n                                  <span className=\"ms-1\">\n                                    Chupa chups topping bonbon. Jelly-o toffee I\n                                    love. Sweet I love wafer I love wafer.\n                                  </span>\n                                </div>\n                              </Alert>\n\n                              <Col className=\"mt-1\" md=\"12\" sm=\"12\">\n                                <Label className=\"form-label\">\n                                  {t(\"Please Select Your Manager\")}\n                                </Label>\n                                <Select\n                                  theme={selectThemeColors}\n                                  className=\"react-select\"\n                                  classNamePrefix=\"select\"\n                                  defaultValue={colourOptions[0]}\n                                  options={colourOptions}\n                                  isClearable={false}\n                                />\n                              </Col>\n                            </Collapse> */}\n                            <Modal\n                              isOpen={isOpen}\n                              toggle={toggle}\n                              className={\"modal-dialog-centered\"}\n                            >\n                              <ModalHeader toggle={toggle}>\n                                {t(\"Manager Approval Required\")}\n                              </ModalHeader>\n                              <ModalBody>\n                                <Alert color=\"primary\">\n                                  <div className=\"alert-body\">\n                                    {t(\n                                      \"Please select your manager to approve your participation in this training\"\n                                    )}\n                                  </div>\n                                </Alert>\n\n                                <Col className=\"mt-1\" md=\"12\" sm=\"12\">\n                                  <Select\n                                    {...renderAvatarImgIcon(managerData)}\n                                    // isDisabled={loadingGetManager}\n                                    placeholder={t(\"Choose Manager\")}\n                                    isLoading={loadingGetManager}\n                                    theme={selectThemeColors}\n                                    className=\"react-select\"\n                                    classNamePrefix=\"select\"\n                                    onChange={setManagerDataSelected}\n                                    options={managerData.map((item) => {\n                                      return {\n                                        label: item.Employee_Name,\n                                        value: item.Id_Employee,\n                                        img: item?.Employee_PhotoPath,\n                                        position: item?.PositionName\n                                      }\n                                    })}\n                                    isClearable={false}\n                                  />\n                                </Col>\n                              </ModalBody>\n                              <ModalFooter>\n                                {!loadingPostPut ? (\n                                  <Button\n                                    disabled={!managerDataSelected}\n                                    color=\"primary\"\n                                    onClick={(e) => {\n                                      e.preventDefault()\n                                      postDataToApi({\n                                        id: row?.Id_Training,\n                                        manager_id: managerDataSelected.value\n                                      })\n                                    }}\n                                    outline\n                                  >\n                                    {t(\"Apply to Manager\")}\n                                  </Button>\n                                ) : (\n                                  <Button.Ripple color=\"primary\">\n                                    <Spinner\n                                      color=\"white\"\n                                      size=\"sm\"\n                                      type=\"grow\"\n                                    />\n                                    <span className=\"ms-50\">{loadingText}</span>\n                                  </Button.Ripple>\n                                )}\n                              </ModalFooter>\n                            </Modal>\n                          </Col>\n                        ) : (\n                          <Col className=\"d-grid mt-2\" sm=\"12\">\n                            <Button.Ripple\n                              onClick={(e) => {\n                                navigate(\n                                  `/dyn_pages/hr/training/edit/${row.Id_Training}/training_employee`\n                                )\n                              }}\n                              color=\"gradient-primary\"\n                            >\n                              <AssignmentIndOutlinedIcon size={14} />\n                              <span className=\"align-middle ms-25\">\n                                {t(\"Assign to Staff\")}\n                              </span>\n                            </Button.Ripple>\n                          </Col>\n                        )}\n                      </CardBody>\n                    </Card>\n                  </SwiperSlide>\n                )\n              })}\n            </Swiper>\n          </CardBody>\n        </Card>\n      </Col>\n    ) : null\n  }\n}\n\nexport default WidgetTrainingAssignedForMe\n"],"sourceRoot":""}