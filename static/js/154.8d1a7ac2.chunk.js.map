{"version":3,"sources":["views/apps/app/Table.js"],"names":["MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","className","type","CustomHeader","store","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","searchTerm","selectedRow","handleDeleteSelected","t","useTranslation","ability","useContext","AbilityContext","useDispatch","useSelector","state","invoices","getUserData","xl","htmlFor","id","value","onChange","style","width","length","can","sessionStorage","getItem","color","onClick","pageTitle","e","target","List","dispatch","storeName","colors","ThemeColors","useState","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","selectedRows","setSelectedRows","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","setLoadingText","showModal","setShowModal","formState","setFormState","handleEdit","rowData","detailFromGrid","setDataById","then","getDataById","res","meta","requestStatus","toast","error","payload","message","padding","danger","main","border","iconTheme","primary","handleCloseModal","revivalBack","neutralizeBack","handleDelete","a","fire","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","success","countSelectedCopy","values","map","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","progLangImg","python","javascript","react","angular","flask","columns","name","sortField","center","sortable","selector","row","cell","logo","appLogo","img","height","imgHeight","imgWidth","is_uploading","size","initials","content","code","info","appType","sixe","programming_language","main_language","src","framework","dynamicColumns","column","columnName","fieldName","field","dataFormat","includes","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","tableColumns","useMemo","isLoading","sx","bgcolor","dark","light","animation","useEffect","data","getAlwaysGrid","blocking","loader","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","count","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","Object","keys","some","k","Array","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","show","setShow","detailPage"],"mappings":"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","file":"static/js/154.8d1a7ac2.chunk.js","sourcesContent":["/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef\n} from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  deleteData,\n  deleteSelectedRowData\n} from \"./store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\n\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Button,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  CardText\n} from \"reactstrap\"\nimport Avatar from \"@components/avatar\"\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport ApiIcon from \"@mui/icons-material/Api\"\nimport WebIcon from \"@mui/icons-material/Web\"\nimport InstallMobileIcon from \"@mui/icons-material/InstallMobile\"\nconst MySwal = withReactContent(Swal)\n\n// ** Bootstrap Checkbox Component\nconst BootstrapCheckbox = forwardRef((props, ref) => (\n  <div className=\"form-check\">\n    <Input type=\"checkbox\" ref={ref} {...props} />\n  </div>\n))\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  toggleSidebar,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm,\n  selectedRow,\n  handleDeleteSelected\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const storeInvoice = useSelector((state) => state.invoices)\n  const userData = getUserData()\n\n  return (\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\n      <Row>\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\n          <div className=\"d-flex align-items-center w-100\">\n            <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n            <Input\n              className=\"mx-50\"\n              type=\"select\"\n              id=\"rows-per-page\"\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{ width: \"5rem\" }}\n            >\n              <option value=\"10\">10</option>\n              <option value=\"25\">25</option>\n              <option value=\"50\">50</option>\n            </Input>\n            <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n          </div>\n        </Col>\n        <Col\n          xl=\"8\"\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\n        >\n          {selectedRow?.length > 0 &&\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) ? (\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n              <Button\n                className=\"delete-users\"\n                color=\"danger\"\n                onClick={handleDeleteSelected}\n              >\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\n              </Button>\n            </div>\n          ) : null}\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n\n          <div className=\"d-flex align-items-center table-header-actions\">\n            {/* <UncontrolledDropdown className=\"me-1\">\n              <DropdownToggle color=\"secondary\" caret outline>\n                <Share className=\"font-small-4 me-50\" />\n                <span className=\"align-middle\">{t(\"Export\")}</span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"pdf\",\n                        dataYear: userData.dataYear,\n                        print: true,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <Printer className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">{t(\"Print\")}</span>\n                </DropdownItem>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"pdf\",\n                        dataYear: userData.dataYear,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <File className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">PDF</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"xls\",\n                        dataYear: userData.dataYear,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <Grid className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Excel</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  className=\"w-100\"\n                  // onClick={() => downloadCSV(store.data)}\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"csv\",\n                        dataYear: userData.dataYear,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <FileText className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">CSV</span>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown> */}\n\n            {ability.can(\n              \"post\",\n              sessionStorage.getItem(\"current_page_perm\")\n            ) ? (\n              <Button\n                className=\"add-new-user\"\n                color=\"primary\"\n                onClick={toggleSidebar}\n                // onClick={handleAdd}\n              >\n                {t(\"Add New\")} {t(pageTitle)}\n              </Button>\n            ) : null}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst List = () => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const { colors } = useContext(ThemeColors)\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [selectedRows, setSelectedRows] = useState([])\n  const [toggleCleared, setToggleCleared] = useState(false)\n\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n\n  const handleEdit = (rowData) => {\n    setFormState(\"edit\")\n    if (!detailFromGrid) {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(getDataById(rowData.id)).then((res) => {\n        if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    } else {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(setDataById(rowData)).then(() => {\n        setLoading(false)\n        setShowModal(true)\n      })\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    // console.log(\"here\")\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const handleDeleteSelected = async () => {\n    const countSelectedCopy = selectedRows.length\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\n        \"selected data. Deleted data cannot be recovered\"\n      )}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\n        pageTitle\n      )}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\n      )\n      setLoading(true)\n      const values = selectedRows.map((a) => a.id)\n      // console.log(values)\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setSelectedRows([])\n          setToggleCleared(!toggleCleared)\n          setLoading(false)\n          toast.success(\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\n            {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            }\n          )\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /////PAGINATION SERVERSIDE\n  const handlePagination = (page) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  const handleDebounceFn = (inputValue) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        search: inputValue,\n        sort,\n        page: currentPage,\n        length: rowsPerPage\n      })\n    )\n  }\n\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\n\n  const handleFilter = (event) => {\n    setSearchTerm(event)\n    debounceFn(event)\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage\n      })\n    )\n  }\n\n  const handleRowSelected = useCallback((state) => {\n    setSelectedRows(state.selectedRows)\n  }, [])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const renderCell = (row, column) => {\n    const field = row[column.fieldName]\n    const dataFormat = column.dataFormat\n    if (dataFormat) {\n      if (dataFormat.includes(\":\")) {\n        const columnTypeFormat = dataFormat.split(\":\")\n        const columnType = columnTypeFormat[0]\n        const columnFormat = columnTypeFormat[1]\n        let columnFormated = row[column.fieldName]\n        if (columnType === \"date\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        if (columnType === \"datetime\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        return columnFormated\n      }\n    }\n    return row[column.fieldName]\n  }\n\n  const progLangImg = {\n    python:\n      \"https://logos-download.com/wp-content/uploads/2016/10/Python_logo_wordmark.png\",\n    javascript: \"https://javascriptsu.files.wordpress.com/2020/12/js.jpg\",\n    react:\n      \"https://logos-download.com/wp-content/uploads/2016/09/React_logo_wordmark.png\",\n    angular:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQgREvN-e1uVZXVDc2w_zLeey0Li4buQ26gF0ZmCYxaBMoybo4uQTncS3Z5WxHRyZNfA&usqp=CAU\",\n    flask: \"https://miro.medium.com/max/1079/1*nvtdCw77Al6LgV8wt_ma6Q.png\"\n  }\n  const columns = [\n    {\n      name: t(\"App Name\"),\n      sortField: \"name\",\n      center: false,\n      sortable: true,\n      selector: (row) => row[\"name\"],\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row.logo?.appLogo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.logo?.appLogo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"25\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : !row.is_uploading ? (\n            <Avatar\n              initials\n              className=\"me-1\"\n              color={\"light-primary\"}\n              content={row.name || \"John Doe\"}\n            />\n          ) : (\n            <Spinner size=\"sm\" color=\"primary\" />\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row.name}</span>\n            <small className=\"text-truncate text-muted mb-0\">{row.code}</small>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"App Type\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row[\"info\"][\"appType\"],\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row?.info?.appType === \"service\" ? (\n            <ApiIcon className=\"me-1\" sixe={32} />\n          ) : (\n            <WebIcon className=\"me-1\" sixe={32} />\n          )}\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row?.info?.appType}</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"Framework\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row[\"info\"][\"programming_language\"][\"main_language\"],\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {progLangImg[row?.info?.programming_language?.main_language] && (\n            <img\n              className=\"me-1\"\n              src={progLangImg[row?.info?.programming_language?.main_language]}\n              // width=\"60\"\n              height=\"18\"\n            />\n          )}\n          {progLangImg[row?.info?.programming_language?.framework] && (\n            <img\n              className=\"me-1\"\n              src={progLangImg[row?.info?.programming_language?.framework]}\n              // width=\"60\"\n              height=\"18\"\n            />\n          )}\n        </div>\n      )\n    },\n    ...store.dynamicColumns.map((column) => ({\n      name: column.columnName,\n      sortField: column.fieldName,\n      center: false,\n      sortable: true,\n      selector: (row) => row[column.fieldName],\n      cell: (row) => renderCell(row, column)\n    })),\n    {\n      name: t(\"Actions\"),\n      center: true,\n      width: \"140px\",\n      cell: (row) => (\n        <GlobalActionsTable\n          row={row}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          storeName={storeName}\n        />\n      )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: t(column.name),\n            ...column,\n            sortable: false,\n            cell: (row) => (\n              <Skeleton\n                sx={{ bgcolor: colors.dark.light }}\n                animation=\"wave\"\n                className={column.name === \"Actions\" ? \"ms-2\" : \"\"}\n                width={column.name === \"Actions\" ? 10 : \"100%\"}\n                height={40}\n              />\n            )\n          }))\n        : columns.map((column) => ({\n            name: t(column.name),\n            ...column\n          })),\n    [store.isLoading, columns]\n  )\n\n  const dataToRender = () => {\n    const filters = {\n      search: searchTerm\n    }\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(\n        getDataList({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage\n        })\n      )\n    }\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              responsive\n              pagination\n              paginationServer\n              paginationTotalRows={store.total}\n              paginationComponent={CustomPagination}\n              selectableRows\n              onSelectedRowsChange={handleRowSelected}\n              selectableRowsHighlight\n              // onRowClicked={handleRowSelected}\n              clearSelectedRows={toggleCleared}\n              selectableRowsComponent={BootstrapCheckbox}\n              noDataComponent={<NoDataDisplay />}\n              // fixedHeader\n              // fixedHeaderScrollHeight=\"600px\"\n              style={{ \"min-height\": \"400px\" }}\n              highlightOnHover\n              pointerOnHover\n              columns={tableColumns}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  toggleSidebar={toggleSidebar}\n                  selectedRow={selectedRows}\n                  handleDeleteSelected={handleDeleteSelected}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={false}\n          setFormState={setFormState}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n"],"sourceRoot":""}