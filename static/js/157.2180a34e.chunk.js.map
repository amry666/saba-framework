{"version":3,"sources":["views/dashboard/widgets/WidgetTrainingAssignedToMe.js"],"names":["params","pagination","clickable","autoplay","delay","disableOnInteraction","WidgetTrainingAssignedToMe","t","useTranslation","store","useSelector","state","dynamicStore","dispatch","dynamic_temp_state","useDispatch","colors","useContext","ThemeColors","useState","loadingPostPut","setLoadingPostPut","loadingDelete","loadingText","setLoadingText","storeName","endpointName","useEffect","pageData","data","length","isLoading","getDataList","baseUrl","type","Id_AttendingState","errorToast","res","errorFieldsMsg","payload","error","errors","errorFields","errorx","toast","message","style","padding","color","danger","main","border","iconTheme","primary","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","toUpperCaseFilter","d","toUpperCase","lg","xs","minHeight","className","tag","blocking","loader","pill","map","row","src","TrainingData","Image","illustration","height","filter","format","StartDate","Name","Description","icon","size","calendar","IsOnline","LinkRef","Address","Ripple","onClick","e","preventDefault","id","Id_Training","window","location","href","putDataWidget","then","meta","requestStatus","xxx","success","x","xx","setTimeout","getDataListMyActivity","catch"],"mappings":"2VA8BMA,EAAS,CAEbC,WAAY,CACVC,WAAW,GAEbC,SAAU,CACRC,MAAO,IACPC,sBAAsB,IAyWXC,UArWoB,WACjC,IAAQC,EAAMC,cAAND,EAEFE,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBAErCC,GADmBH,aAAY,SAACC,GAAD,OAAWA,EAAMG,sBACrCC,eAETC,EAAWC,qBAAWC,KAAtBF,OACR,EAA8BG,oBAAS,GAAvC,mBACA,GADA,UAC4CA,oBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KACA,GADA,KACsCH,mBAAS,gBAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAEMC,EAAY,8BACZC,EAAe,8BAErBC,qBAAU,WAAO,IAAD,MAEXlB,EAAMmB,SAASH,KAC6B,KAA5C,UAAAhB,EAAMmB,SAASH,UAAf,mBAA2BI,YAA3B,eAAiCC,SAChC,UAACrB,EAAMmB,SAASH,UAAhB,OAAC,EAA2BM,YAE9BlB,EACEmB,YAAY,CACVP,UAAWA,EACXC,aAAcA,EACdO,QAAS,KACTC,KAAM,QACNC,kBAAmB,OAIxB,IAEH,IAqGA,gBArGMC,EAAa,SAACC,GAAS,IAAD,QACtBC,EAAiB,GACrB,UAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAKE,eAAT,iBAAI,EAAcC,aAAlB,OAAI,EAAqBC,OAAQ,CAAC,IAAD,IACzBC,EAAW,OAAGL,QAAH,IAAGA,GAAH,UAAGA,EAAKE,eAAR,iBAAG,EAAcC,aAAjB,aAAG,EAAqBC,OACzC,IAAK,IAAIE,KAAT,OAAmBN,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAKE,eAAxB,iBAAmB,EAAcC,aAAjC,aAAmB,EAAqBC,OAAQ,CAAC,IAAD,IAC9CH,EAAc,UAAMA,EAAN,cAA0BI,EAAYC,GAAtC,OAIlB,OAAOC,IAAMJ,MAAN,oBACFH,EAAIE,eADF,iBACF,EAAaC,aADX,aACF,EAAoBK,QADlB,kBACmCP,GACxC,CACEQ,MAAO,CACLC,QAAS,OACTC,MAAOhC,EAAOiC,OAAOC,KACrBC,OAAO,aAAD,OAAenC,EAAOiC,OAAOC,OAErCE,UAAW,CACTC,QAASrC,EAAOiC,OAAOC,SAsEzBI,EAAkB,CACtBC,QAAS,cACTC,QAAS,UACTC,QAAS,aACTC,SAAU,cACVC,SAAU,OACVC,SAAU,KAGNC,EAAoB,SAACC,GACzB,OAAOA,EAAEC,eAIT,OAAO,UAAAtD,EAAMmB,SAASH,UAAf,SAA2BM,UAChC,cAAC,IAAD,CAAKiC,GAAG,KAAKC,GAAG,KAAhB,SACE,eAAC,IAAD,CAAMnB,MAAO,CAAEoB,UAAW,SAA1B,UACE,cAAC,IAAD,UACE,sBAAKC,UAAU,4BAAf,UACE,cAAC,IAAD,CAA8BA,UAAU,kCACxC,cAAC,IAAD,CAAWC,IAAI,KAAf,SAAqB7D,EAAE,8BAG3B,cAAC,IAAD,CAAU8D,UAAU,EAAMC,OAAQ,cAAC,IAAD,IAAlC,SACE,cAAC,IAAD,YAIJ,UAAA7D,EAAMmB,SAASH,UAAf,mBAA2BI,YAA3B,eAAiCC,QAAS,EAC5C,cAAC,IAAD,CAAKkC,GAAG,KAAKC,GAAG,KAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,sBAAKE,UAAU,4BAAf,UACE,cAAC,IAAD,CAA8BA,UAAU,kCACxC,cAAC,IAAD,CAAWC,IAAI,KAAf,SAAqB7D,EAAE,0BACtB,UAAAE,EAAMmB,SAASH,UAAf,mBAA2BI,YAA3B,eAAiCC,QAAS,GACzC,cAAC,IAAD,CAAOqC,UAAU,OAAOC,IAAI,MAAMpB,MAAM,OAAOuB,MAAI,EAAnD,mBACG9D,EAAMmB,SAASH,UADlB,iBACG,EAA2BI,YAD9B,aACG,EAAiCC,cAM1C,cAAC,IAAD,CAAUqC,UAAU,YAApB,SACE,cAAC,IAAD,2BAAYnE,GAAZ,uBACGS,EAAMmB,SAASH,UADlB,aACG,EAA2BI,KAAK2C,KAAI,SAACC,GAAS,IAAD,sBAC5C,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAMN,UAAU,wCAAhB,UACE,qBAAKA,UAAU,6CAAf,SACE,qBACEO,IACK,OAAHD,QAAG,IAAHA,GAAA,UAAAA,EAAKE,oBAAL,SAAmBC,MACfH,EAAIE,aAAaC,MACjBC,IAENC,OAAO,UAGX,eAAC,IAAD,WACE,sBAAKX,UAAU,0CAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,OAAd,SACE,cAAC,IAAD,CAAQY,OAAQlB,EAAmBmB,OAAO,MAA1C,gBACGP,QADH,IACGA,GADH,UACGA,EAAKE,oBADR,aACG,EAAmBM,cAGxB,oBAAId,UAAU,OAAd,SACE,cAAC,IAAD,CAAQa,OAAO,KAAf,gBACGP,QADH,IACGA,GADH,UACGA,EAAKE,oBADR,aACG,EAAmBM,iBAI1B,sBAAKd,UAAU,wBAAf,UACE,cAAC,IAAD,CAAWC,IAAI,KAAKD,UAAU,QAA9B,gBACGM,QADH,IACGA,GADH,UACGA,EAAKE,oBADR,aACG,EAAmBO,OAEtB,cAAC,IAAD,CAAUf,UAAU,OAApB,gBACGM,QADH,IACGA,GADH,UACGA,EAAKE,oBADR,aACG,EAAmBQ,oBAI1B,sBAAKhB,UAAU,SAAf,UACE,cAAC,IAAD,CACEnB,MAAM,gBACNmB,UAAU,eACViB,KAAM,cAAC,IAAD,CAAUC,KAAM,OAExB,gCAGE,oBAAIlB,UAAU,OAAd,SAEI,cAAC,IAAD,CAAQmB,SAAUhC,EAAlB,gBACGmB,QADH,IACGA,GADH,UACGA,EAAKE,oBADR,aACG,EAAmBM,cAI1B,gCAEI,cAAC,IAAD,CAAQD,OAAO,gBAAf,gBACGP,QADH,IACGA,GADH,UACGA,EAAKE,oBADR,aACG,EAAmBM,oBAM7B,OAACR,QAAD,IAACA,GAAD,UAACA,EAAKE,oBAAN,OAAC,EAAmBY,SAanB,sBAAKpB,UAAU,cAAf,UACE,cAAC,IAAD,CACEnB,MAAM,gBACNmB,UAAU,eACViB,KAAM,cAAC,IAAD,CAAOC,KAAM,OAErB,gCACE,oBAAIlB,UAAU,OAAd,SAAsB5D,EAAE,qBACxB,gCACM,OAAHkE,QAAG,IAAHA,GAAA,UAAAA,EAAKE,oBAAL,SAAmBa,QAAnB,OACGf,QADH,IACGA,GADH,UACGA,EAAKE,oBADR,aACG,EAAmBa,QACnB,wDAvBV,sBAAKrB,UAAU,cAAf,UACE,cAAC,IAAD,CACEnB,MAAM,gBACNmB,UAAU,eACViB,KAAM,cAAC,IAAD,CAAQC,KAAM,OAEtB,8BAEE,uCAAQZ,QAAR,IAAQA,GAAR,UAAQA,EAAKE,oBAAb,aAAQ,EAAmBc,eAqBL,KAAxB,OAAHhB,QAAG,IAAHA,OAAA,EAAAA,EAAKtC,oBACJ,sBAAKgC,UAAU,qDAAf,WACI/C,IACEE,EAKA,eAAC,IAAOoE,OAAR,CAAe1C,MAAM,sBAArB,UACE,cAAC,IAAD,CACEA,MAAM,QACNqC,KAAK,KACLnD,KAAK,SAEP,sBAAMiC,UAAU,QAAhB,SAAyB5C,OAV3B,cAAC,IAAOmE,OAAR,CAAe1C,MAAM,sBAArB,SACGzC,EAAE,cAaPa,EAaA,eAAC,IAAOsE,OAAR,CAAe1C,MAAM,mBAArB,UACE,cAAC,IAAD,CAASA,MAAM,QAAQqC,KAAK,KAAKnD,KAAK,SACtC,sBAAMiC,UAAU,QAAhB,SAAyB5C,OAd3B,cAAC,IAAOmE,OAAR,CACEC,QAAS,SAACC,GA7NnB,IAAC/D,EA8NU+D,EAAEC,iBA9NZhE,EA+NuB,CACXiE,GAAE,OAAErB,QAAF,IAAEA,OAAF,EAAEA,EAAKsB,aA/NzC1E,GAAkB,GAClBG,EAAe,wBACfK,EAAI,UAAgBJ,EACpBI,EAAI,aAAmBH,EACvBG,EAAI,QAAc,KAClBA,EAAI,cAAoBmE,OAAOC,SAASC,KACxCrF,EAASsF,YAActE,IACpBuE,MAAK,SAAC/D,GAG0B,cAA3BA,EAAIgE,KAAKC,cACXzF,EACEmB,YAAY,CACVP,UAAWA,EACXC,aAAcA,EACdO,QAAS,KACTC,KAAM,QACNC,kBAAmB,KAGpBiE,MAAK,SAACG,GACL3D,IAAM4D,QAAN,UACKjG,EAAE,2CADP,KAEE,CACEuC,MAAO,CACLC,QAAS,OACTC,MAAOhC,EAAOwF,QAAQtD,KACtBC,OAAO,aAAD,OAAenC,EAAOwF,QAAQtD,OAEtCE,UAAW,CACTC,QAASrC,EAAOwF,QAAQtD,WAK/BkD,MAAK,SAACK,GACLpF,GAAkB,MAEnB+E,MAAK,SAACM,GACL7F,EACEmB,YAAY,CACVP,UAAW,wBACXC,aAAc,8BACdO,QAAS,KACTC,KAAM,QACNC,kBAAmB,KAGvBwE,YAAW,WACT9F,EAAS+F,sBAAsB,OAC9B,QAE6B,aAA3BvE,EAAIgE,KAAKC,eAClBlE,EAAWC,MAGdwE,OAAM,SAACrE,GAENnB,GAAkB,GAClBe,EAAWI,OAuKaQ,MAAM,mBAPR,SASGzC,EAAE,eAkDiB,KAAxB,OAAHkE,QAAG,IAAHA,OAAA,EAAAA,EAAKtC,oBACJ,qBAAKgC,UAAU,wDAAf,SACE,cAAC,IAAOuB,OAAR,CAAe1C,MAAM,sBAArB,SACGzC,EAAE,wCA3Kf,iBAA4BkE,EAAIqB,kBAwL1C","file":"static/js/157.2180a34e.chunk.js","sourcesContent":["import Avatar from \"@components/avatar\"\nimport UILoader from \"@components/ui-loader\"\nimport illustration from \"@src/assets/images/illustration/email.svg\"\nimport { Loader } from \"@src/shared/CommonComponents\"\nimport { getDataList, putDataWidget } from \"@src/shared/dynamic_pages/store\"\nimport \"moment-timezone\"\nimport \"moment/locale/id\"\nimport { useContext, useEffect, useState } from \"react\"\nimport { Calendar, MapPin, Video } from \"react-feather\"\nimport { useTranslation } from \"react-i18next\"\nimport Moment from \"react-moment\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n  Badge,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardText,\n  CardTitle,\n  Col,\n  Spinner\n} from \"reactstrap\"\n\nimport InsertInvitationOutlinedIcon from \"@mui/icons-material/InsertInvitationOutlined\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { getDataList as getDataListMyActivity } from \"@src/views/my-info/store/my_activities\"\nimport toast from \"react-hot-toast\"\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\"\n\nconst params = {\n  // navigation: true\n  pagination: {\n    clickable: true\n  },\n  autoplay: {\n    delay: 10000,\n    disableOnInteraction: false\n  }\n}\n\nconst WidgetTrainingAssignedToMe = () => {\n  const { t } = useTranslation()\n  // const store = useSelector((state) => state[storeName])\n  const store = useSelector((state) => state.dynamicStore)\n  const dynamicTempState = useSelector((state) => state.dynamic_temp_state)\n  const dispatch = useDispatch()\n\n  const { colors } = useContext(ThemeColors)\n  const [loading, setLoading] = useState(false)\n  const [loadingPostPut, setLoadingPostPut] = useState(false)\n  const [loadingDelete, setLoadingDelete] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n\n  const storeName = \"TrainingEmployee_assignToMe\"\n  const endpointName = \"TrainingEmployee/assignment\"\n\n  useEffect(() => {\n    if (\n      !store.pageData[storeName] ||\n      (store.pageData[storeName]?.data?.length === 0 &&\n        !store.pageData[storeName]?.isLoading)\n    ) {\n      dispatch(\n        getDataList({\n          storeName: storeName,\n          endpointName: endpointName,\n          baseUrl: \"hr\",\n          type: \"to_me\",\n          Id_AttendingState: 0\n        })\n      )\n    }\n  }, [])\n\n  const errorToast = (res) => {\n    let errorFieldsMsg = \"\"\n    if (res?.payload?.error?.errors) {\n      const errorFields = res?.payload?.error?.errors\n      for (let errorx in res?.payload?.error?.errors) {\n        errorFieldsMsg = `${errorFieldsMsg} - ${errorFields[errorx]}\\n`\n        // console.log(errorx, errorFields[errorx])\n      }\n    }\n    return toast.error(\n      `${res.payload?.error?.message} \\n \\n ${errorFieldsMsg}`,\n      {\n        style: {\n          padding: \"16px\",\n          color: colors.danger.main,\n          border: `1px solid ${colors.danger.main}`\n        },\n        iconTheme: {\n          primary: colors.danger.main\n        }\n      }\n    )\n  }\n\n  const putDataToApi = (data) => {\n    setLoadingPostPut(true)\n    setLoadingText(\"Accepting Invitation\")\n    data[\"storeName\"] = storeName\n    data[\"endpointName\"] = endpointName\n    data[\"baseUrl\"] = \"hr\"\n    data[\"callback_page\"] = window.location.href\n    dispatch(putDataWidget(data))\n      .then((res) => {\n        // console.log(res)\n\n        if (res.meta.requestStatus === \"fulfilled\") {\n          dispatch(\n            getDataList({\n              storeName: storeName,\n              endpointName: endpointName,\n              baseUrl: \"hr\",\n              type: \"to_me\",\n              Id_AttendingState: 0\n            })\n          )\n            .then((xxx) => {\n              toast.success(\n                `${t(\"Successfully Accept Training Invitation\")}}`,\n                {\n                  style: {\n                    padding: \"16px\",\n                    color: colors.success.main,\n                    border: `1px solid ${colors.success.main}`\n                  },\n                  iconTheme: {\n                    primary: colors.success.main\n                  }\n                }\n              )\n            })\n            .then((x) => {\n              setLoadingPostPut(false)\n            })\n            .then((xx) => {\n              dispatch(\n                getDataList({\n                  storeName: \"TrainingEmployee_task\",\n                  endpointName: \"TrainingEmployee/assignment\",\n                  baseUrl: \"hr\",\n                  type: \"to_me\",\n                  Id_AttendingState: 1\n                })\n              )\n              setTimeout(() => {\n                dispatch(getDataListMyActivity({}))\n              }, 8000)\n            })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          errorToast(res)\n        }\n      })\n      .catch((error) => {\n        // console.error(error)\n        setLoadingPostPut(false)\n        errorToast(error)\n      })\n  }\n\n  const calendarStrings = {\n    lastDay: \"[Yesterday]\",\n    sameDay: \"[Today]\",\n    nextDay: \"[Tomorrow]\",\n    lastWeek: \"[last] dddd\",\n    nextWeek: \"dddd\",\n    sameElse: \"L\"\n  }\n\n  const toUpperCaseFilter = (d) => {\n    return d.toUpperCase()\n  }\n\n  {\n    return store.pageData[storeName]?.isLoading ? (\n      <Col lg=\"12\" xs=\"12\">\n        <Card style={{ minHeight: \"200px\" }}>\n          <CardHeader>\n            <div className=\"d-flex align-items-center\">\n              <InsertInvitationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\n              <CardTitle tag=\"h4\">{t(\"Training Invitation\")}</CardTitle>\n            </div>\n          </CardHeader>\n          <UILoader blocking={true} loader={<Loader />}>\n            <CardBody></CardBody>\n          </UILoader>\n        </Card>\n      </Col>\n    ) : store.pageData[storeName]?.data?.length > 0 ? (\n      <Col lg=\"12\" xs=\"12\">\n        <Card>\n          <CardHeader>\n            <div className=\"d-flex align-items-center\">\n              <InsertInvitationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\n              <CardTitle tag=\"h4\">{t(\"Training Invitation\")}</CardTitle>\n              {store.pageData[storeName]?.data?.length > 1 && (\n                <Badge className=\"ms-1\" tag=\"div\" color=\"info\" pill>\n                  {store.pageData[storeName]?.data?.length}\n                </Badge>\n              )}\n            </div>\n          </CardHeader>\n\n          <CardBody className=\"px-0 pb-0\">\n            <Swiper {...params}>\n              {store.pageData[storeName]?.data.map((row) => {\n                return (\n                  <SwiperSlide key={`swiper_${row.id}`}>\n                    <Card className=\"card-developer-meetup  cursor-pointer\">\n                      <div className=\"meetup-img-wrapper rounded-top text-center\">\n                        <img\n                          src={\n                            row?.TrainingData?.Image\n                              ? row.TrainingData.Image\n                              : illustration\n                          }\n                          height=\"170\"\n                        />\n                      </div>\n                      <CardBody>\n                        <div className=\"meetup-header d-flex align-items-center\">\n                          <div className=\"meetup-day\">\n                            <h6 className=\"mb-0\">\n                              <Moment filter={toUpperCaseFilter} format=\"ddd\">\n                                {row?.TrainingData?.StartDate}\n                              </Moment>\n                            </h6>\n                            <h3 className=\"mb-0\">\n                              <Moment format=\"DD\">\n                                {row?.TrainingData?.StartDate}\n                              </Moment>\n                            </h3>\n                          </div>\n                          <div className=\"my-auto text-truncate\">\n                            <CardTitle tag=\"h4\" className=\"mb-25\">\n                              {row?.TrainingData?.Name}\n                            </CardTitle>\n                            <CardText className=\"mb-0\">\n                              {row?.TrainingData?.Description}\n                            </CardText>\n                          </div>\n                        </div>\n                        <div className=\"d-flex\">\n                          <Avatar\n                            color=\"light-primary\"\n                            className=\"rounded me-1\"\n                            icon={<Calendar size={18} />}\n                          />\n                          <div>\n                            {/* <h6 className=\"mb-0\">Sat, May 25, 2020</h6>\n                    <small>10:AM to 6:PM</small> */}\n                            <h6 className=\"mb-0\">\n                              {\n                                <Moment calendar={calendarStrings}>\n                                  {row?.TrainingData?.StartDate}\n                                </Moment>\n                              }\n                            </h6>\n                            <small>\n                              {\n                                <Moment format=\"[Start at] LT\">\n                                  {row?.TrainingData?.StartDate}\n                                </Moment>\n                              }\n                            </small>\n                          </div>\n                        </div>\n                        {!row?.TrainingData?.IsOnline ? (\n                          <div className=\"d-flex mt-2\">\n                            <Avatar\n                              color=\"light-primary\"\n                              className=\"rounded me-1\"\n                              icon={<MapPin size={18} />}\n                            />\n                            <div>\n                              {/* <h6 className=\"mb-0\">Central Park</h6> */}\n                              <small>{row?.TrainingData?.Address}</small>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"d-flex mt-2\">\n                            <Avatar\n                              color=\"light-primary\"\n                              className=\"rounded me-1\"\n                              icon={<Video size={18} />}\n                            />\n                            <div>\n                              <h6 className=\"mb-0\">{t(\"Online Training\")}</h6>\n                              <small>\n                                {row?.TrainingData?.LinkRef\n                                  ? row?.TrainingData?.LinkRef\n                                  : \"The link will be sent before the event starts\"}\n                              </small>\n                            </div>\n                          </div>\n                        )}\n                        {/* <AvatarGroup data={data} /> */}\n                        {row?.Id_AttendingState !== 3 && (\n                          <div className=\"d-flex mt-2 align-items-center justify-content-end\">\n                            {!loadingPostPut &&\n                              (!loadingDelete ? (\n                                <Button.Ripple color=\"flat-secondary me-1\">\n                                  {t(\"Decline\")}\n                                </Button.Ripple>\n                              ) : (\n                                <Button.Ripple color=\"flat-secondary me-1\">\n                                  <Spinner\n                                    color=\"white\"\n                                    size=\"sm\"\n                                    type=\"grow\"\n                                  />\n                                  <span className=\"ms-50\">{loadingText}</span>\n                                </Button.Ripple>\n                              ))}\n\n                            {!loadingPostPut ? (\n                              <Button.Ripple\n                                onClick={(e) => {\n                                  e.preventDefault()\n                                  putDataToApi({\n                                    id: row?.Id_Training\n                                  })\n                                }}\n                                color=\"gradient-primary\"\n                              >\n                                {t(\"Accept\")}\n                              </Button.Ripple>\n                            ) : (\n                              <Button.Ripple color=\"gradient-primary\">\n                                <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                                <span className=\"ms-50\">{loadingText}</span>\n                              </Button.Ripple>\n                            )}\n                          </div>\n                        )}\n\n                        {/* {row?.Id_AttendingState !== 3 && (\n                          <div className=\"d-flex mt-2 align-items-center justify-content-end\">\n                            {!loadingPostPut &&\n                              (!loadingDelete ? (\n                                <Button.Ripple color=\"flat-secondary me-1\">\n                                  {t(\"Decline\")}\n                                </Button.Ripple>\n                              ) : (\n                                <Button.Ripple color=\"flat-secondary me-1\">\n                                  <Spinner\n                                    color=\"white\"\n                                    size=\"sm\"\n                                    type=\"grow\"\n                                  />\n                                  <span className=\"ms-50\">{loadingText}</span>\n                                </Button.Ripple>\n                              ))}\n\n                            {!loadingPostPut ? (\n                              <Button.Ripple\n                                onClick={(e) => {\n                                  e.preventDefault()\n                                  putDataToApi({\n                                    id: row?.Id_Training\n                                  })\n                                }}\n                                color=\"gradient-primary\"\n                              >\n                                {t(\"Accept\")}\n                              </Button.Ripple>\n                            ) : (\n                              <Button.Ripple color=\"gradient-primary\">\n                                <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                                <span className=\"ms-50\">{loadingText}</span>\n                              </Button.Ripple>\n                            )}\n                          </div>\n                        )} */}\n\n                        {row?.Id_AttendingState === 3 && (\n                          <div className=\"d-flex mt-2 align-items-center justify-content-center\">\n                            <Button.Ripple color=\"flat-secondary me-1\">\n                              {t(\"Awaiting Manager Approval\")}\n                            </Button.Ripple>\n                          </div>\n                        )}\n                      </CardBody>\n                    </Card>\n                  </SwiperSlide>\n                )\n              })}\n            </Swiper>\n          </CardBody>\n        </Card>\n      </Col>\n    ) : null\n  }\n}\n\nexport default WidgetTrainingAssignedToMe\n"],"sourceRoot":""}