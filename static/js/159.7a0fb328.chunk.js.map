{"version":3,"sources":["views/pages/authentication/register-multi-steps/steps/AccountDetails.js"],"names":["ToastContent","x","name","message","className","size","color","icon","onClick","toast","dismiss","id","ToastErrorContent","defaultValues","email","username","password","confirmPassword","AccountDetails","stepper","t","useTranslation","useSkin","skin","useState","block","setBlock","setErrorInfo","setSuccessInfo","SignupSchema","yup","shape","required","min","max","matches","oneOf","useForm","resolver","yupResolver","control","handleSubmit","errors","formState","blocking","loader","onSubmit","data","Object","values","every","field","length","params","localStorage","getItem","useJwt","register","then","res","sessionStorage","setItem","register_token","next","catch","err","messageError","includes","response","error_reason","md","for","render","type","placeholder","invalid","label","htmlFor","mobile_number"],"mappings":"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","file":"static/js/159.7a0fb328.chunk.js","sourcesContent":["import { useState, Fragment } from \"react\"\nimport useJwt from \"@src/auth/jwt/useJwt\"\nimport * as yup from \"yup\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { AlertCircle, Navigation, X, ChevronRight } from \"react-feather\"\nimport { Form, Label, Input, Row, Col, Button, FormFeedback } from \"reactstrap\"\nimport InputPasswordToggle from \"@components/input-password-toggle\"\nimport { useTranslation } from \"react-i18next\"\nimport toast from \"react-hot-toast\"\nimport Avatar from \"@components/avatar\"\nimport Spinner from \"@components/spinner/Fallback-spinner\"\nimport UILoader from \"@components/ui-loader\"\nimport { useSkin } from \"@hooks/useSkin\"\n\nconst ToastContent = ({ x, name, message }) => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"me-1\">\n        <Avatar size=\"sm\" color=\"info\" icon={<Navigation size={12} />} />\n      </div>\n      <div className=\"d-flex flex-column\">\n        <div className=\"d-flex justify-content-between\">\n          <h6>{name}</h6>\n          <X\n            size={12}\n            className=\"cursor-pointer\"\n            onClick={() => toast.dismiss(x.id)}\n          />\n        </div>\n        <span>{message}</span>\n      </div>\n    </div>\n  )\n}\n\nconst ToastErrorContent = ({ x, name, message }) => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"me-1\">\n        <Avatar size=\"sm\" color=\"danger\" icon={<AlertCircle size={12} />} />\n      </div>\n      <div className=\"d-flex flex-column\">\n        <div className=\"d-flex justify-content-between\">\n          <h6>{name}</h6>\n          <X\n            size={12}\n            className=\"cursor-pointer\"\n            onClick={() => toast.dismiss(x.id)}\n          />\n        </div>\n        <span>{message}</span>\n      </div>\n    </div>\n  )\n}\n\nconst defaultValues = {\n  email: \"\",\n  username: \"\",\n  password: \"\",\n  confirmPassword: \"\"\n}\n\nconst AccountDetails = ({ stepper }) => {\n  const { t } = useTranslation()\n  const { skin } = useSkin()\n  const [block, setBlock] = useState(false)\n  const [errorInfo, setErrorInfo] = useState(null)\n  const [successInfo, setSuccessInfo] = useState(null)\n\n  const SignupSchema = yup.object().shape({\n    username: yup\n      .string()\n      .required(\"Username is required\")\n      .min(4, \"Username must be at least 4 characters\")\n      .max(15, \"Username cannot exceed 15 characters\")\n      .matches(\n        /^[a-zA-Z0-9_]+$/,\n        \"Username can only contain letters, numbers, and underscores\"\n      ),\n    email: yup.string().email().required(),\n    password: yup.string().required(),\n    confirmPassword: yup\n      .string()\n      .required()\n      .oneOf([yup.ref(`password`), null], t(\"Passwords must match\"))\n  })\n\n  // ** Hooks\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({\n    defaultValues,\n    resolver: yupResolver(SignupSchema)\n  })\n\n  const onSubmit = (data) => {\n    if (Object.values(data).every((field) => field.length > 0)) {\n      let params = { ...data }\n      if (localStorage.getItem(\"dev\") !== null) {\n        params[\"device_id\"] = localStorage.getItem(\"dev\")\n        delete params[\"confirmPassword\"]\n      }\n      setBlock(true)\n      useJwt\n        .register(params)\n        .then((res) => {\n          const data = res.data\n          setBlock(false)\n          setSuccessInfo(data?.message)\n          sessionStorage.setItem(\"register_token\", data?.register_token)\n          toast((x) => (\n            <ToastContent\n              x={x}\n              name={t(\"Successfully\")}\n              message={data?.message}\n            />\n          ))\n          stepper.next()\n        })\n        .catch((err) => {\n          // console.log(err.response?.data?.message)\n          setBlock(false)\n          // console.log(err)\n          let messageError = `${t(\n            \"Failed. Please check your email and password and make sure your account is registered correctly. Contact our support team if needed.\"\n          )}`\n          if (\n            [\"email_taken\", \"username_taken\", \"email_await\"].includes(\n              err.response?.data?.error_reason\n            )\n          ) {\n            messageError = err.response?.data?.message\n          }\n          setErrorInfo(messageError)\n          toast((x) => (\n            <ToastErrorContent\n              x={x}\n              name={t(\"Register Failed\")}\n              message={messageError}\n              // message={`${t(err.message)}`}\n            />\n          ))\n        })\n    }\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Spinner />}>\n      <Fragment>\n        <div className=\"content-header mb-2\">\n          <h2 className=\"fw-bolder mb-75\">{t(\"Account Information\")}</h2>\n          <span>\"{t(\"Enter your email password details\")}\"</span>\n        </div>\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <Row>\n            <Col md=\"6\" className=\"mb-1\">\n              <Label className=\"form-label\" for={`email`}>\n                Email\n              </Label>\n              <Controller\n                control={control}\n                id=\"email\"\n                name=\"email\"\n                render={({ field }) => (\n                  <Input\n                    type=\"email\"\n                    placeholder=\"john.doe@email.com\"\n                    invalid={errors.email && true}\n                    {...field}\n                  />\n                )}\n              />\n              {errors.email && (\n                <FormFeedback>{errors.email.message}</FormFeedback>\n              )}\n            </Col>\n            <Col md=\"6\" className=\"mb-1\">\n              <Label className=\"form-label\" for=\"username\">\n                Username\n              </Label>\n              <Controller\n                id=\"username\"\n                name=\"username\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    placeholder=\"johndoe\"\n                    invalid={errors.username && true}\n                    {...field}\n                  />\n                )}\n              />\n              {errors.username && (\n                <FormFeedback>{errors.username.message}</FormFeedback>\n              )}\n            </Col>\n          </Row>\n          <Row>\n            <div className=\"form-password-toggle col-md-6 mb-1\">\n              <Controller\n                id=\"password\"\n                name=\"password\"\n                control={control}\n                render={({ field }) => (\n                  <InputPasswordToggle\n                    label={t(\"Password\")}\n                    htmlFor=\"password\"\n                    className=\"input-group-merge\"\n                    invalid={errors.password && true}\n                    {...field}\n                  />\n                )}\n              />\n              {errors.password && (\n                <FormFeedback>{errors.password.message}</FormFeedback>\n              )}\n            </div>\n            <div className=\"form-password-toggle col-md-6 mb-1\">\n              <Controller\n                control={control}\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <InputPasswordToggle\n                    label={t(\"Confirm Password\")}\n                    htmlFor=\"confirmPassword\"\n                    className=\"input-group-merge\"\n                    invalid={errors.confirmPassword && true}\n                    {...field}\n                  />\n                )}\n              />\n              {errors.confirmPassword && (\n                <FormFeedback>{errors.confirmPassword.message}</FormFeedback>\n              )}\n            </div>\n          </Row>\n          <Row>\n            <Col md=\"6\" className=\"mb-1\">\n              <Label className=\"form-label\" for=\"name\">\n                {t(\"Name\")}\n              </Label>\n              <Controller\n                id=\"name\"\n                name=\"name\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    placeholder=\"John\"\n                    invalid={errors.name && true}\n                    {...field}\n                  />\n                )}\n              />\n              {errors.name && (\n                <FormFeedback>{errors.name.message}</FormFeedback>\n              )}\n            </Col>\n            <Col md=\"6\" className=\"mb-1\">\n              <Label className=\"form-label\" for=\"mobile_number\">\n                {t(\"Mobile Number\")}\n              </Label>\n              <Controller\n                id=\"mobile_number\"\n                name=\"mobile_number\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    type=\"number\"\n                    id=\"phone\"\n                    name=\"mobile_number\"\n                    placeholder=\"(472) 765-3654\"\n                    invalid={errors.mobile_number && true}\n                    {...field}\n                  />\n                )}\n              />\n              {errors.mobile_number && (\n                <FormFeedback>{errors.mobile_number.message}</FormFeedback>\n              )}\n            </Col>\n          </Row>\n          {/* <Row>\n          <Col sm={12} className=\"mb-1\">\n            <Label className=\"form-label\" for=\"profile-link\">\n              Profile Link\n            </Label>\n            <Input id=\"profile-link\" placeholder=\"johndoe/profile\" />\n          </Col>\n          <Col sm={12} className=\"mb-1\">\n            <div className=\"form-check form-check-inline\">\n              <Input type=\"checkbox\" id=\"remember-me\" />\n              <Label for=\"remember-me\" className=\"form-check-label\">\n                {t(\"Remember Me\")}\n              </Label>\n            </div>\n          </Col>\n        </Row> */}\n          <div className=\"d-flex justify-content-end mt-2\">\n            {/* <Button color=\"secondary\" className=\"btn-prev\" outline disabled>\n            <ChevronLeft\n              size={14}\n              className=\"align-middle me-sm-25 me-0\"\n            ></ChevronLeft>\n            <span className=\"align-middle d-sm-inline-block d-none\">\n              {t(\"Previous\")}\n            </span>\n          </Button> */}\n            <Button type=\"submit\" color=\"primary\" className=\"btn-next\">\n              <span className=\"align-middle d-sm-inline-block d-none\">\n                {t(\"Next\")}\n              </span>\n              <ChevronRight\n                size={14}\n                className=\"align-middle ms-sm-25 ms-0\"\n              ></ChevronRight>\n            </Button>\n          </div>\n        </Form>\n      </Fragment>\n    </UILoader>\n  )\n}\n\nexport default AccountDetails\n"],"sourceRoot":""}