{"version":3,"sources":["views/apps/role/index.js","views/apps/role/DropDown.js"],"names":["List","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_defaultValue","lookupMode_onChange","lookupMode_isMulti","errorState","t","useTranslation","dispatch","useDispatch","store","useSelector","state","storeName","useEffect","getApiSummaryData","dataSummary","length","isLoadingSummary","getSummaryData","className","data","isLoading","getAlwaysGrid","getDataList","theme","selectThemeColors","defaultValue","dataDropdown","filter","el","value","isMulti","onChange","e","options","classNamePrefix"],"mappings":"gKAAA,8EAuHeA,UA/GF,SAAC,GAQR,EAPJC,WAOK,IAAD,MANJC,4BAMI,MANmB,GAMnB,MALJC,2BAKI,SAJJC,EAII,EAJJA,wBACAC,EAGI,EAHJA,oBAGI,IAFJC,0BAEI,aADJC,kBACI,SACIC,EAAMC,cAAND,EACFE,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBAE3CC,qBAAU,WAAO,IAAD,EAEZC,qBAC8B,KAA9B,UAAAL,EAAMM,mBAAN,eAAmBC,UAClBP,EAAMQ,kBAEPV,EAASW,yBAAe,OAEzB,CAACX,GAAU,UAAAE,EAAMM,mBAAN,eAAmBC,QAAS,IAW1C,OAAQhB,EAqEN,cAAC,UAAD,CACED,qBAAsBA,EACtBG,oBAAqBA,EACrBD,wBAAyBA,EACzBE,mBAAoBA,EACpBC,WAAYA,IAzEd,eAAC,WAAD,WACE,6BAAKC,EAAE,gBACP,mBAAGc,UAAU,OAAb,SACGd,EACC,uJAGJ,cAAC,UAAD,S,iCChDN,oFAqDeR,UA3CF,SAAC,GAMP,IAAD,IALJE,4BAKI,MALmB,GAKnB,MAJJI,0BAII,SAHJD,EAGI,EAHJA,oBACAD,EAEI,EAFJA,wBAIMM,GAFF,EADJH,WAEcE,cAAND,EACSG,eACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBAY3C,OANAC,qBAAU,YACkB,IAAtBJ,EAAMW,KAAKJ,SAAkBP,EAAMY,WAAaC,kBAClDf,EAASgB,sBAAY,OAEtB,CAAChB,EAAUE,EAAMW,KAAKJ,SAGvB,cAAC,WAAD,UACE,cAAC,IAAD,CACEQ,MAAOC,IACPC,aACGvB,EAIGF,EAHAQ,EAAMkB,aAAaC,QACjB,SAACC,GAAD,OAAQA,EAAGC,QAAU7B,KAI7B8B,QAAS5B,EAET6B,SAvBgB,SAACC,GACrB,OAAO/B,EAAoB+B,EAAEH,MAAO/B,IAuBhCmC,QAASzB,EAAMkB,aACfR,UAAU,eACVgB,gBAAgB","file":"static/js/18.4070c5bd.chunk.js","sourcesContent":["import { Fragment, useEffect } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport DropDown from \"./DropDown\"\nimport RoleCards from \"./RoleCards\"\nimport { getApiSummaryData, getSummaryData, storeName } from \"./store\"\nimport \"./style.scss\"\n\nconst List = ({\n  lookupMode = false,\n  lookupMode_fieldName = \"\",\n  lookupMode_dropdown = false,\n  lookupMode_defaultValue,\n  lookupMode_onChange,\n  lookupMode_isMulti = false,\n  errorState = false\n}) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  useEffect(() => {\n    if (\n      getApiSummaryData &&\n      store.dataSummary?.length === 0 &&\n      !store.isLoadingSummary\n    ) {\n      dispatch(getSummaryData({}))\n    }\n  }, [dispatch, store.dataSummary?.length > 0])\n\n  const colors = [\n    \"primary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"info\",\n    \"secondary\"\n  ]\n\n  return !lookupMode_dropdown ? (\n    <Fragment>\n      <h3>{t(\"Roles List\")}</h3>\n      <p className=\"mb-2\">\n        {t(\n          \"A role provides access to predefined menus and features depending on the assigned role to an administrator that can have access to what he needs.\"\n        )}\n      </p>\n      <RoleCards />\n      {/* <h3 className=\"mt-50\">{t(\"Total users with their roles\")}</h3>\n      <p className=\"mb-2\">\n        {t(\n          \"Find all of your companyâ€™s administrator accounts and their associate roles.\"\n        )}\n      </p>\n      <div className=\"app-user-list\">\n        <Table />\n      </div> */}\n    </Fragment>\n  ) : (\n    // <div className=\"app-user-list\">\n    //   {getApiSummaryData && (\n    //     <Row>\n    //       {store.dataSummary?.map((item, index) => {\n    //         return (\n    //           <Col>\n    //             <StatsHorizontal\n    //               color={colors[index]}\n    //               statTitle={`${t(item.title)}`}\n    //               icon={\n    //                 item.icon ? (\n    //                   <Icon\n    //                     baseClassName=\"material-icons-outlined\"\n    //                     fontSize=\"20\"\n    //                   >\n    //                     {item.icon}\n    //                   </Icon>\n    //                 ) : (\n    //                   <Icon\n    //                     baseClassName=\"material-icons-outlined\"\n    //                     fontSize=\"20\"\n    //                   >\n    //                     lightbulb\n    //                   </Icon>\n    //                 )\n    //               }\n    //               renderStats={\n    //                 store.isLoadingSummary ? (\n    //                   <Skeleton\n    //                     sx={{ bgcolor: \"#eef2f8\" }}\n    //                     animation=\"wave\"\n    //                     height={25}\n    //                     width={40}\n    //                     className=\"fw-bolder mb-75\"\n    //                   />\n    //                 ) : (\n    //                   <h3 className=\"fw-bolder mb-75\">\n    //                     {item.count_format ?? item.count}\n    //                   </h3>\n    //                 )\n    //               }\n    //             />\n    //           </Col>\n    //         )\n    //       })}\n    //     </Row>\n    //   )}\n    //   <Table />\n    // </div>\n    <DropDown\n      lookupMode_fieldName={lookupMode_fieldName}\n      lookupMode_onChange={lookupMode_onChange}\n      lookupMode_defaultValue={lookupMode_defaultValue}\n      lookupMode_isMulti={lookupMode_isMulti}\n      errorState={errorState}\n    />\n  )\n}\n\nexport default List\n","import { Fragment, useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport \"./style.scss\"\nimport { selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\nimport Select from \"react-select\"\n\nimport { storeName, getDataList, getAlwaysGrid } from \"./store\"\n\nconst List = ({\n  lookupMode_fieldName = \"\",\n  lookupMode_isMulti = false,\n  lookupMode_onChange,\n  lookupMode_defaultValue,\n  errorState\n}) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const onChangeInput = (e) => {\n    return lookupMode_onChange(e.value, lookupMode_fieldName)\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      dispatch(getDataList({}))\n    }\n  }, [dispatch, store.data.length])\n\n  return (\n    <Fragment>\n      <Select\n        theme={selectThemeColors}\n        defaultValue={\n          !lookupMode_isMulti\n            ? store.dataDropdown.filter(\n                (el) => el.value === lookupMode_defaultValue\n              )\n            : lookupMode_defaultValue\n        }\n        isMulti={lookupMode_isMulti}\n        // onChange={lookupMode_onChange}\n        onChange={onChangeInput}\n        options={store.dataDropdown}\n        className=\"react-select\"\n        classNamePrefix=\"select\"\n      />\n    </Fragment>\n  )\n}\n\nexport default List\n"],"sourceRoot":""}