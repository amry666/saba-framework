{"version":3,"sources":["views/apps/app/index.js","views/apps/app/Table.js","views/apps/app/DropDown.js"],"names":["List","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","lookupMode_onChange","lookupMode_defaultValue","t","lookupMode_isM2MDefValFromGrid","useTranslation","dispatch","useDispatch","store","useSelector","state","storeName","useState","searchTerm","useEffect","getApiSummaryData","dataSummary","length","isLoadingSummary","getAlwaysGrid","getSummaryData","colors","className","title","pageTitle","data","map","item","index","color","statTitle","icon","baseClassName","fontSize","renderStats","sx","bgcolor","animation","height","width","count_format","count","searchString","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","type","CustomHeader","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","selectedRow","handleDeleteSelected","ability","useContext","AbilityContext","invoices","getUserData","xl","htmlFor","id","value","onChange","style","can","sessionStorage","getItem","onClick","e","target","ThemeColors","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","selectedRows","setSelectedRows","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","setLoadingText","showModal","setShowModal","formState","setFormState","handleEdit","rowData","detailFromGrid","setDataById","then","getDataById","res","meta","requestStatus","toast","error","payload","message","padding","danger","main","border","iconTheme","primary","handleCloseModal","revivalBack","neutralizeBack","handleDelete","a","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","success","countSelectedCopy","values","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","progLangImg","python","javascript","react","angular","flask","columns","name","sortField","center","sortable","selector","row","cell","logo","appLogo","img","imgHeight","imgWidth","is_uploading","size","initials","content","code","info","appType","sixe","programming_language","main_language","src","framework","dynamicColumns","column","columnName","fieldName","field","dataFormat","includes","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","tableColumns","useMemo","isLoading","dark","light","blocking","loader","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","Object","keys","some","k","Array","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","show","setShow","detailPage","theme","selectThemeColors","defaultValue","dataDropdown","filter","el","placeholder","isMulti","options","classnames","selectedData","classNamePrefix"],"mappings":"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","file":"static/js/44.62dd75b8.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport Table from \"./Table\"\nimport DropDown from \"./DropDown\"\nimport { Row, Col, Input } from \"reactstrap\"\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\nimport Icon from \"@mui/material/Icon\"\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\nimport \"./style.scss\"\nimport Breadcrumbs from \"@components/breadcrumbs\"\n\nimport {\n  storeName,\n  getAlwaysGrid,\n  getApiSummaryData,\n  getSummaryData,\n  pageTitle\n} from \"./store\"\nimport { Skeleton } from \"@mui/material\"\n\nconst List = ({\n  lookupMode = false,\n  lookupMode_fieldName = \"\",\n  lookupMode_dropdown = false,\n  lookupMode_isMulti = false,\n  lookupMode_onChange,\n  lookupMode_defaultValue,\n  lookupMode_isM2MDefValFromGrid\n}) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  const handleFilter = (event) => {\n    // console.log(\"handleFilter\")\n    setSearchTerm(event)\n    // debounceFn(event)\n  }\n\n  useEffect(() => {\n    if (\n      getApiSummaryData &&\n      (store.dataSummary?.length === 0 ||\n        (!store.isLoadingSummary && getAlwaysGrid))\n    ) {\n      dispatch(getSummaryData({}))\n    }\n  }, [dispatch, store.dataSummary?.length])\n\n  const colors = [\n    \"primary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"info\",\n    \"secondary\"\n  ]\n\n  return !lookupMode_dropdown ? (\n    <Fragment>\n      <div className=\"content-header row\">\n        {!lookupMode && (\n          <Breadcrumbs\n            title={t(pageTitle)}\n            data={[{ title: t(\"App Setting\") }, { title: t(pageTitle) }]}\n          />\n        )}\n        {/* <div className=\"content-header-right text-md-end col-md col-12 mb-2 \">\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n        </div> */}\n      </div>\n      <div className=\"app-user-list\">\n        {!lookupMode && getApiSummaryData && (\n          <Row>\n            {store.dataSummary?.map((item, index) => {\n              return (\n                <Col key={index}>\n                  <StatsHorizontal\n                    color={colors[index]}\n                    statTitle={`${t(item.title)}`}\n                    icon={\n                      item.icon ? (\n                        <Icon\n                          baseClassName=\"material-icons-outlined\"\n                          fontSize=\"20\"\n                        >\n                          {item.icon}\n                        </Icon>\n                      ) : (\n                        <Icon\n                          baseClassName=\"material-icons-outlined\"\n                          fontSize=\"20\"\n                        >\n                          lightbulb\n                        </Icon>\n                      )\n                    }\n                    renderStats={\n                      store.isLoadingSummary ? (\n                        <Skeleton\n                          sx={{ bgcolor: \"#eef2f8\" }}\n                          animation=\"wave\"\n                          height={25}\n                          width={40}\n                          className=\"fw-bolder mb-75\"\n                        />\n                      ) : (\n                        <h3 className=\"fw-bolder mb-75\">\n                          {item.count_format ?? item.count}\n                        </h3>\n                      )\n                    }\n                  />\n                </Col>\n              )\n            })}\n          </Row>\n        )}\n        <Table\n          searchString={searchTerm}\n          lookupMode={lookupMode}\n          lookupMode_fieldName={lookupMode_fieldName}\n          lookupMode_defaultValue={lookupMode_defaultValue}\n          lookupMode_onChange={lookupMode_onChange}\n          lookupMode_isMulti={lookupMode_isMulti}\n          lookupMode_isM2MDefValFromGrid\n        />\n        {/* <Table /> */}\n      </div>\n    </Fragment>\n  ) : (\n    <DropDown\n      lookupMode_fieldName={lookupMode_fieldName}\n      lookupMode_onChange={lookupMode_onChange}\n      lookupMode_defaultValue={lookupMode_defaultValue}\n      lookupMode_isMulti={lookupMode_isMulti}\n      lookupMode_isM2MDefValFromGrid\n    />\n  )\n}\n\nexport default List\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef\n} from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  deleteData,\n  deleteSelectedRowData\n} from \"./store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\n\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Button,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  CardText\n} from \"reactstrap\"\nimport Avatar from \"@components/avatar\"\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport ApiIcon from \"@mui/icons-material/Api\"\nimport WebIcon from \"@mui/icons-material/Web\"\nimport InstallMobileIcon from \"@mui/icons-material/InstallMobile\"\nconst MySwal = withReactContent(Swal)\n\n// ** Bootstrap Checkbox Component\nconst BootstrapCheckbox = forwardRef((props, ref) => (\n  <div className=\"form-check\">\n    <Input type=\"checkbox\" ref={ref} {...props} />\n  </div>\n))\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  toggleSidebar,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm,\n  selectedRow,\n  handleDeleteSelected\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const storeInvoice = useSelector((state) => state.invoices)\n  const userData = getUserData()\n\n  return (\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\n      <Row>\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\n          <div className=\"d-flex align-items-center w-100\">\n            <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n            <Input\n              className=\"mx-50\"\n              type=\"select\"\n              id=\"rows-per-page\"\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{ width: \"5rem\" }}\n            >\n              <option value=\"10\">10</option>\n              <option value=\"25\">25</option>\n              <option value=\"50\">50</option>\n            </Input>\n            <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n          </div>\n        </Col>\n        <Col\n          xl=\"8\"\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\n        >\n          {selectedRow?.length > 0 &&\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) ? (\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n              <Button\n                className=\"delete-users\"\n                color=\"danger\"\n                onClick={handleDeleteSelected}\n              >\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\n              </Button>\n            </div>\n          ) : null}\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n\n          <div className=\"d-flex align-items-center table-header-actions\">\n            {/* <UncontrolledDropdown className=\"me-1\">\n              <DropdownToggle color=\"secondary\" caret outline>\n                <Share className=\"font-small-4 me-50\" />\n                <span className=\"align-middle\">{t(\"Export\")}</span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"pdf\",\n                        dataYear: userData.dataYear,\n                        print: true,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <Printer className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">{t(\"Print\")}</span>\n                </DropdownItem>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"pdf\",\n                        dataYear: userData.dataYear,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <File className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">PDF</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"xls\",\n                        dataYear: userData.dataYear,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <Grid className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Excel</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  className=\"w-100\"\n                  // onClick={() => downloadCSV(store.data)}\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"csv\",\n                        dataYear: userData.dataYear,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <FileText className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">CSV</span>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown> */}\n\n            {ability.can(\n              \"post\",\n              sessionStorage.getItem(\"current_page_perm\")\n            ) ? (\n              <Button\n                className=\"add-new-user\"\n                color=\"primary\"\n                onClick={toggleSidebar}\n                // onClick={handleAdd}\n              >\n                {t(\"Add New\")} {t(pageTitle)}\n              </Button>\n            ) : null}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst List = () => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const { colors } = useContext(ThemeColors)\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [selectedRows, setSelectedRows] = useState([])\n  const [toggleCleared, setToggleCleared] = useState(false)\n\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n\n  const handleEdit = (rowData) => {\n    setFormState(\"edit\")\n    if (!detailFromGrid) {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(getDataById(rowData.id)).then((res) => {\n        if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    } else {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(setDataById(rowData)).then(() => {\n        setLoading(false)\n        setShowModal(true)\n      })\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    // console.log(\"here\")\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const handleDeleteSelected = async () => {\n    const countSelectedCopy = selectedRows.length\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\n        \"selected data. Deleted data cannot be recovered\"\n      )}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\n        pageTitle\n      )}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\n      )\n      setLoading(true)\n      const values = selectedRows.map((a) => a.id)\n      // console.log(values)\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setSelectedRows([])\n          setToggleCleared(!toggleCleared)\n          setLoading(false)\n          toast.success(\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\n            {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            }\n          )\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /////PAGINATION SERVERSIDE\n  const handlePagination = (page) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  const handleDebounceFn = (inputValue) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        search: inputValue,\n        sort,\n        page: currentPage,\n        length: rowsPerPage\n      })\n    )\n  }\n\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\n\n  const handleFilter = (event) => {\n    setSearchTerm(event)\n    debounceFn(event)\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage\n      })\n    )\n  }\n\n  const handleRowSelected = useCallback((state) => {\n    setSelectedRows(state.selectedRows)\n  }, [])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const renderCell = (row, column) => {\n    const field = row[column.fieldName]\n    const dataFormat = column.dataFormat\n    if (dataFormat) {\n      if (dataFormat.includes(\":\")) {\n        const columnTypeFormat = dataFormat.split(\":\")\n        const columnType = columnTypeFormat[0]\n        const columnFormat = columnTypeFormat[1]\n        let columnFormated = row[column.fieldName]\n        if (columnType === \"date\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        if (columnType === \"datetime\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        return columnFormated\n      }\n    }\n    return row[column.fieldName]\n  }\n\n  const progLangImg = {\n    python:\n      \"https://logos-download.com/wp-content/uploads/2016/10/Python_logo_wordmark.png\",\n    javascript: \"https://javascriptsu.files.wordpress.com/2020/12/js.jpg\",\n    react:\n      \"https://logos-download.com/wp-content/uploads/2016/09/React_logo_wordmark.png\",\n    angular:\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQgREvN-e1uVZXVDc2w_zLeey0Li4buQ26gF0ZmCYxaBMoybo4uQTncS3Z5WxHRyZNfA&usqp=CAU\",\n    flask: \"https://miro.medium.com/max/1079/1*nvtdCw77Al6LgV8wt_ma6Q.png\"\n  }\n  const columns = [\n    {\n      name: t(\"App Name\"),\n      sortField: \"name\",\n      center: false,\n      sortable: true,\n      selector: (row) => row[\"name\"],\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row.logo?.appLogo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.logo?.appLogo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"25\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : !row.is_uploading ? (\n            <Avatar\n              initials\n              className=\"me-1\"\n              color={\"light-primary\"}\n              content={row.name || \"John Doe\"}\n            />\n          ) : (\n            <Spinner size=\"sm\" color=\"primary\" />\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row.name}</span>\n            <small className=\"text-truncate text-muted mb-0\">{row.code}</small>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"App Type\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row[\"info\"][\"appType\"],\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row?.info?.appType === \"service\" ? (\n            <ApiIcon className=\"me-1\" sixe={32} />\n          ) : (\n            <WebIcon className=\"me-1\" sixe={32} />\n          )}\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row?.info?.appType}</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"Framework\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row[\"info\"][\"programming_language\"][\"main_language\"],\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {progLangImg[row?.info?.programming_language?.main_language] && (\n            <img\n              className=\"me-1\"\n              src={progLangImg[row?.info?.programming_language?.main_language]}\n              // width=\"60\"\n              height=\"18\"\n            />\n          )}\n          {progLangImg[row?.info?.programming_language?.framework] && (\n            <img\n              className=\"me-1\"\n              src={progLangImg[row?.info?.programming_language?.framework]}\n              // width=\"60\"\n              height=\"18\"\n            />\n          )}\n        </div>\n      )\n    },\n    ...store.dynamicColumns.map((column) => ({\n      name: column.columnName,\n      sortField: column.fieldName,\n      center: false,\n      sortable: true,\n      selector: (row) => row[column.fieldName],\n      cell: (row) => renderCell(row, column)\n    })),\n    {\n      name: t(\"Actions\"),\n      center: true,\n      width: \"140px\",\n      cell: (row) => (\n        <GlobalActionsTable\n          row={row}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          storeName={storeName}\n        />\n      )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: t(column.name),\n            ...column,\n            sortable: false,\n            cell: (row) => (\n              <Skeleton\n                sx={{ bgcolor: colors.dark.light }}\n                animation=\"wave\"\n                className={column.name === \"Actions\" ? \"ms-2\" : \"\"}\n                width={column.name === \"Actions\" ? 10 : \"100%\"}\n                height={40}\n              />\n            )\n          }))\n        : columns.map((column) => ({\n            name: t(column.name),\n            ...column\n          })),\n    [store.isLoading, columns]\n  )\n\n  const dataToRender = () => {\n    const filters = {\n      search: searchTerm\n    }\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(\n        getDataList({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage\n        })\n      )\n    }\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              responsive\n              pagination\n              paginationServer\n              paginationTotalRows={store.total}\n              paginationComponent={CustomPagination}\n              selectableRows\n              onSelectedRowsChange={handleRowSelected}\n              selectableRowsHighlight\n              // onRowClicked={handleRowSelected}\n              clearSelectedRows={toggleCleared}\n              selectableRowsComponent={BootstrapCheckbox}\n              noDataComponent={<NoDataDisplay />}\n              // fixedHeader\n              // fixedHeaderScrollHeight=\"600px\"\n              style={{ \"min-height\": \"400px\" }}\n              highlightOnHover\n              pointerOnHover\n              columns={tableColumns}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  toggleSidebar={toggleSidebar}\n                  selectedRow={selectedRows}\n                  handleDeleteSelected={handleDeleteSelected}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={false}\n          setFormState={setFormState}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n","import { Fragment, useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport \"./style.scss\"\nimport { selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\nimport Select from \"react-select\"\n\nimport { storeName, getDataList, getAlwaysGrid, pageTitle } from \"./store\"\n\nconst List = ({\n  lookupMode_fieldName = \"\",\n  lookupMode_isMulti = false,\n  lookupMode_onChange,\n  lookupMode_defaultValue\n}) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const onChangeInput = (e) => {\n    return lookupMode_onChange(e.value, lookupMode_fieldName)\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      dispatch(getDataList({}))\n    }\n  }, [dispatch, store.data.length])\n\n  return (\n    <Fragment>\n      <Select\n        theme={selectThemeColors}\n        defaultValue={\n          !lookupMode_isMulti\n            ? store.dataDropdown.filter(\n                (el) => el.value === lookupMode_defaultValue\n              )\n            : lookupMode_defaultValue\n        }\n        placeholder={`${t(\"Filter\")} ${t(pageTitle)}...`}\n        isMulti={lookupMode_isMulti}\n        // onChange={lookupMode_onChange}\n        onChange={onChangeInput}\n        options={store.dataDropdown}\n        className={classnames(\"react-select\", {\n          \"is-invalid\": store.selectedData?.id === null\n        })}\n        classNamePrefix=\"select\"\n      />\n    </Fragment>\n  )\n}\n\nexport default List\n"],"sourceRoot":""}