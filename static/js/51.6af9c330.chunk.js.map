{"version":3,"sources":["views/apps/permission/index.js","views/apps/permission/DropDown.js"],"names":["List","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_defaultValue","lookupMode_onChange","lookupMode_isMulti","errorState","t","useTranslation","dispatch","useDispatch","store","useSelector","state","storeName","useEffect","getApiSummaryData","dataSummary","length","isLoadingSummary","getAlwaysGrid","getSummaryData","colors","map","item","index","color","statTitle","title","icon","baseClassName","fontSize","renderStats","sx","bgcolor","animation","height","width","className","count_format","count","data","isLoading","getDataList","theme","selectThemeColors","defaultValue","dataDropdown","filter","el","value","isMulti","onChange","e","options","classNamePrefix"],"mappings":"gKAAA,4HAoIeA,UA9GF,SAAC,GAQP,IAAD,QAPJC,kBAOI,aANJC,4BAMI,MANmB,GAMnB,MALJC,2BAKI,SAJJC,EAII,EAJJA,wBACAC,EAGI,EAHJA,oBAGI,IAFJC,0BAEI,aADJC,kBACI,SACIC,EAAMC,cAAND,EACFE,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBAE3CC,qBAAU,WAAO,IAAD,EAEZC,sBAC+B,KAA9B,UAAAL,EAAMM,mBAAN,eAAmBC,UAChBP,EAAMQ,kBAAoBC,kBAE9BX,EAASY,yBAAe,OAEzB,CAACZ,EAAD,UAAWE,EAAMM,mBAAjB,aAAW,EAAmBC,SAEjC,IAAMI,EAAS,CACb,UACA,UACA,UACA,SACA,OACA,aAGF,OAAQpB,EAoEN,cAAC,UAAD,CACED,qBAAsBA,EACtBG,oBAAqBA,EACrBD,wBAAyBA,EACzBE,mBAAoBA,EACpBC,WAAYA,IAxEd,eAAC,WAAD,WACE,6BAAKC,EAAE,sBACP,4BACGA,EACC,wGAGFP,GAAcgB,qBACd,cAAC,IAAD,oBACGL,EAAMM,mBADT,aACG,EAAmBM,KAAI,SAACC,EAAMC,GAAW,IAAD,EACvC,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,MAAOJ,EAAOG,GACdE,UAAS,UAAKpB,EAAEiB,EAAKI,QACrBC,KACEL,EAAKK,KACH,cAAC,IAAD,CACEC,cAAc,0BACdC,SAAS,KAFX,SAIGP,EAAKK,OAGR,cAAC,IAAD,CACEC,cAAc,0BACdC,SAAS,KAFX,uBAQJC,YACErB,EAAMQ,iBACJ,cAAC,IAAD,CACEc,GAAI,CAAEC,QAAS,WACfC,UAAU,OACVC,OAAQ,GACRC,MAAO,GACPC,UAAU,oBAGZ,oBAAIA,UAAU,kBAAd,mBACGd,EAAKe,oBADR,QACwBf,EAAKgB,iBAW7C,cAAC,IAAD,UACE,qBAAKF,UAAU,gDAAf,SACE,cAAC,UAAD,CACEtC,WAAYA,EACZC,qBAAsBA,EACtBE,wBAAyBA,EACzBC,oBAAqBA,EACrBC,mBAAoBA,a,iCCpHhC,oFAqDeN,UA3CF,SAAC,GAMP,IAAD,IALJE,4BAKI,MALmB,GAKnB,MAJJI,0BAII,SAHJD,EAGI,EAHJA,oBACAD,EAEI,EAFJA,wBAIMM,GAFF,EADJH,WAEcE,cAAND,EACSG,eACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBAY3C,OANAC,qBAAU,YACkB,IAAtBJ,EAAM8B,KAAKvB,SAAkBP,EAAM+B,WAAatB,kBAClDX,EAASkC,sBAAY,OAEtB,CAAClC,EAAUE,EAAM8B,KAAKvB,SAGvB,cAAC,WAAD,UACE,cAAC,IAAD,CACE0B,MAAOC,IACPC,aACGzC,EAIGF,EAHAQ,EAAMoC,aAAaC,QACjB,SAACC,GAAD,OAAQA,EAAGC,QAAU/C,KAI7BgD,QAAS9C,EAET+C,SAvBgB,SAACC,GACrB,OAAOjD,EAAoBiD,EAAEH,MAAOjD,IAuBhCqD,QAAS3C,EAAMoC,aACfT,UAAU,eACViB,gBAAgB","file":"static/js/51.6af9c330.chunk.js","sourcesContent":["import { Fragment, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport Table from \"./Table\"\nimport DropDown from \"./DropDown\"\nimport { Row, Col, Card } from \"reactstrap\"\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\nimport Icon from \"@mui/material/Icon\"\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\nimport \"./style.scss\"\nimport { selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\nimport Select from \"react-select\"\nimport {\n  storeName,\n  getAlwaysGrid,\n  getApiSummaryData,\n  getSummaryData\n} from \"./store\"\nimport { Skeleton } from \"@mui/material\"\n\nconst List = ({\n  lookupMode = false,\n  lookupMode_fieldName = \"\",\n  lookupMode_dropdown = false,\n  lookupMode_defaultValue,\n  lookupMode_onChange,\n  lookupMode_isMulti = false,\n  errorState = false\n}) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  useEffect(() => {\n    if (\n      getApiSummaryData &&\n      (store.dataSummary?.length === 0 ||\n        (!store.isLoadingSummary && getAlwaysGrid))\n    ) {\n      dispatch(getSummaryData({}))\n    }\n  }, [dispatch, store.dataSummary?.length])\n\n  const colors = [\n    \"primary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"info\",\n    \"secondary\"\n  ]\n\n  return !lookupMode_dropdown ? (\n    <Fragment>\n      <h3>{t(\"Permissions List\")}</h3>\n      <p>\n        {t(\n          \"Each category (Basic, Professional, and Business) includes the four predefined roles shown below.\"\n        )}\n      </p>\n      {!lookupMode && getApiSummaryData && (\n        <Row>\n          {store.dataSummary?.map((item, index) => {\n            return (\n              <Col>\n                <StatsHorizontal\n                  color={colors[index]}\n                  statTitle={`${t(item.title)}`}\n                  icon={\n                    item.icon ? (\n                      <Icon\n                        baseClassName=\"material-icons-outlined\"\n                        fontSize=\"20\"\n                      >\n                        {item.icon}\n                      </Icon>\n                    ) : (\n                      <Icon\n                        baseClassName=\"material-icons-outlined\"\n                        fontSize=\"20\"\n                      >\n                        lightbulb\n                      </Icon>\n                    )\n                  }\n                  renderStats={\n                    store.isLoadingSummary ? (\n                      <Skeleton\n                        sx={{ bgcolor: \"#eef2f8\" }}\n                        animation=\"wave\"\n                        height={25}\n                        width={40}\n                        className=\"fw-bolder mb-75\"\n                      />\n                    ) : (\n                      <h3 className=\"fw-bolder mb-75\">\n                        {item.count_format ?? item.count}\n                      </h3>\n                    )\n                  }\n                />\n              </Col>\n            )\n          })}\n        </Row>\n      )}\n\n      <Card>\n        <div className=\"card-datatable app-user-list table-responsive\">\n          <Table\n            lookupMode={lookupMode}\n            lookupMode_fieldName={lookupMode_fieldName}\n            lookupMode_defaultValue={lookupMode_defaultValue}\n            lookupMode_onChange={lookupMode_onChange}\n            lookupMode_isMulti={lookupMode_isMulti}\n          />\n        </div>\n      </Card>\n    </Fragment>\n  ) : (\n    <DropDown\n      lookupMode_fieldName={lookupMode_fieldName}\n      lookupMode_onChange={lookupMode_onChange}\n      lookupMode_defaultValue={lookupMode_defaultValue}\n      lookupMode_isMulti={lookupMode_isMulti}\n      errorState={errorState}\n    />\n  )\n}\n\nexport default List\n","import { Fragment, useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport \"./style.scss\"\nimport { selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\nimport Select from \"react-select\"\n\nimport { storeName, getDataList, getAlwaysGrid } from \"./store\"\n\nconst List = ({\n  lookupMode_fieldName = \"\",\n  lookupMode_isMulti = false,\n  lookupMode_onChange,\n  lookupMode_defaultValue,\n  errorState\n}) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const onChangeInput = (e) => {\n    return lookupMode_onChange(e.value, lookupMode_fieldName)\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      dispatch(getDataList({}))\n    }\n  }, [dispatch, store.data.length])\n\n  return (\n    <Fragment>\n      <Select\n        theme={selectThemeColors}\n        defaultValue={\n          !lookupMode_isMulti\n            ? store.dataDropdown.filter(\n                (el) => el.value === lookupMode_defaultValue\n              )\n            : lookupMode_defaultValue\n        }\n        isMulti={lookupMode_isMulti}\n        // onChange={lookupMode_onChange}\n        onChange={onChangeInput}\n        options={store.dataDropdown}\n        className=\"react-select\"\n        classNamePrefix=\"select\"\n      />\n    </Fragment>\n  )\n}\n\nexport default List\n"],"sourceRoot":""}