{"version":3,"sources":["../node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js","views/apps/menu/modal/index.js"],"names":["_excluded","getStyleValue","value","parseInt","styles","visibility","position","overflow","height","top","left","transform","isEmpty","obj","undefined","Object","keys","length","outerHeightStyle","TextareaAutosize","React","props","forwardedRef","onChange","maxRows","minRows","style","other","_objectWithoutPropertiesLoose","isControlled","current","inputRef","handleRef","useForkRef","shadowRef","renders","state","setState","getUpdatedState","input","computedStyle","ownerWindow","getComputedStyle","width","inputShallow","placeholder","slice","boxSizing","padding","paddingBottom","paddingTop","border","borderBottomWidth","borderTopWidth","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","abs","updateState","prevState","newState","syncHeight","resizeObserver","handleResize","debounce","ReactDOM","syncHeightWithFlushSync","containerWindow","addEventListener","ResizeObserver","observe","clear","removeEventListener","disconnect","useEnhancedEffect","_jsxs","children","_jsx","_extends","event","ref","rows","className","readOnly","tabIndex","CustomLabel","htmlFor","size","ModalAddEdit","show","setShow","detailPage","formState","setFormState","currentData","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","storeName","colors","useContext","ThemeColors","useState","setLoadingText","useForm","control","setError","setValue","getValues","handleSubmit","errors","is_separator","isSeparator","setIsSeparator","iconCategory","setIconCategory","icon","setIcon","canvasPlacement","setCanvasPlacement","canvasOpen","setCanvasOpen","toggleCanvasStart","toggleCanvasBottom","setIconBefore","handleReset","resetSelectedData","isOpen","toggle","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","title","onSubmit","data","parent_id","id_app","values","every","field","putData","then","res","meta","requestStatus","toast","success","color","main","iconTheme","primary","getDataById","error","payload","message","danger","key","type","is_app_header","postData","md","xs","for","defaultValue","selectedData","name","render","invalid","val","target","Ripple","outline","onClick","renderIcon","marginTop","defaultChecked","checked","changeSeparator","dataDropdown","filter","el","theme","selectThemeColors","isDisabled","options","map","item","label","classnames","classNamePrefix","routePath","description","direction"],"mappings":"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","file":"static/js/78.1b917f98.chunk.js","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)\n */\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({\n    outerHeightStyle: 0\n  });\n  const getUpdatedState = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflow\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const updateState = (prevState, newState) => {\n    const {\n      outerHeightStyle,\n      overflow\n    } = newState;\n    // Need a large enough difference to update the height.\n    // This prevents infinite rendering loop.\n    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n      renders.current += 1;\n      return {\n        overflow,\n        outerHeightStyle\n      };\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (renders.current === 20) {\n        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n      }\n    }\n    return prevState;\n  };\n  const syncHeight = React.useCallback(() => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n    setState(prevState => {\n      return updateState(prevState, newState);\n    });\n  }, [getUpdatedState]);\n  const syncHeightWithFlushSync = () => {\n    const newState = getUpdatedState();\n    if (isEmpty(newState)) {\n      return;\n    }\n\n    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n    // Related issue - https://github.com/facebook/react/issues/24331\n    ReactDOM.flushSync(() => {\n      setState(prevState => {\n        return updateState(prevState, newState);\n      });\n    });\n  };\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n\n      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last\n      // ResizeObserver's handler that runs because of the change in the layout is trying to\n      // access a dom node that is no longer there (as the fallback component is being shown instead).\n      // See https://github.com/mui/material-ui/issues/32640\n      if (inputRef.current) {\n        syncHeightWithFlushSync();\n      }\n    });\n    let resizeObserver;\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', handleResize);\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  });\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n  const handleChange = event => {\n    renders.current = 0;\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : undefined\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;","/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport { Check, X } from \"react-feather\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  Offcanvas,\n  OffcanvasHeader,\n  OffcanvasBody,\n  InputGroup\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors, sortedObject } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"../store\"\n\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport classnames from \"classnames\"\nimport { TextareaAutosize } from \"@mui/material\"\nimport { renderIcon } from \"../store/my_menu\"\nimport IconsFeather from \"../icons/feather\"\nimport IconsMaterial from \"../icons/material\"\n\nconst CustomLabel = ({ htmlFor }) => {\n  return (\n    <Label className=\"form-check-label\" htmlFor={htmlFor}>\n      <span className=\"switch-icon-left\">\n        <Check size={14} />\n      </span>\n      <span className=\"switch-icon-right\">\n        <X size={14} />\n      </span>\n    </Label>\n  )\n}\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState,\n  currentData = null\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const {\n    control,\n    setError,\n    setValue,\n    getValues,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const [isSeparator, setIsSeparator] = useState(currentData.is_separator)\n  const [iconCategory, setIconCategory] = useState(\"feather\")\n  const [icon, setIcon] = useState(currentData?.icon)\n\n  const [canvasPlacement, setCanvasPlacement] = useState(\"start\")\n  const [canvasOpen, setCanvasOpen] = useState(false)\n  const toggleCanvasStart = () => {\n    setIconCategory(\"feather\")\n    setCanvasPlacement(\"start\")\n    setCanvasOpen(!canvasOpen)\n  }\n\n  const toggleCanvasBottom = () => {\n    setIconCategory(\"feather\")\n    setCanvasPlacement(\"bottom\")\n    setCanvasOpen(!canvasOpen)\n  }\n\n  const setIconBefore = (icon) => {\n    setValue(\"icon\", icon)\n    setIcon(icon)\n  }\n\n  const countChanges = (data) => {\n    // if (formState === \"edit\") {\n    //   const storeData = { ...sortedObject(store.selectedData) }\n    //   delete storeData[\"id\"]\n    //   for (let key in storeData) {\n    //     if (!(key in data)) delete storeData[key]\n    //   }\n    //   // console.log(JSON.stringify(sortedObject(storeData)))\n    //   // console.log(JSON.stringify(sortedObject(data)))\n    //   return (\n    //     JSON.stringify(sortedObject(storeData)) !==\n    //     JSON.stringify(sortedObject(data))\n    //   )\n    // } else {\n    //   return true\n    // }\n\n    return true\n  }\n\n  const updateDataToApi = (data) => {\n    // console.log(data)\n    data[\"is_separator\"] = isSeparator\n    data[\"icon\"] = icon\n    // console.log(data)\n    if (data.parent_id) {\n      if (data.parent_id.value >= 9000) {\n        data[\"id_app\"] = data.parent_id.id_app\n        data[\"parent_id\"] = null\n      } else {\n        data[\"parent_id\"] = data.parent_id.value\n      }\n    }\n    // console.log(data)\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null\n        }) ||\n        data[\"parent_id\"] === null\n      ) {\n        if (!isSeparator && data[\"routePath\"] === \"\") {\n          for (const key in data) {\n            if (data[key] !== null && data[key]?.length === 0) {\n              setError(key, {\n                type: \"manual\"\n              })\n            }\n          }\n        } else {\n          setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n          dispatch(putData(data)).then((res) => {\n            // console.log(res)\n            if (res.meta.requestStatus === \"fulfilled\") {\n              setShow(!show)\n              toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n                style: {\n                  padding: \"16px\",\n                  color: colors.success.main,\n                  border: `1px solid ${colors.success.main}`\n                },\n                iconTheme: {\n                  primary: colors.success.main\n                }\n              })\n              if (detailPage) {\n                dispatch(getDataById(id))\n              }\n            } else if (res.meta.requestStatus === \"rejected\") {\n              toast.error(res.payload.message, {\n                style: {\n                  padding: \"16px\",\n                  color: colors.danger.main,\n                  border: `1px solid ${colors.danger.main}`\n                },\n                iconTheme: {\n                  primary: colors.danger.main\n                }\n              })\n            }\n          })\n        }\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = (data) => {\n    // console.log(data)\n    if (\n      Object.values(data).every((field) => {\n        return field !== null\n      })\n    ) {\n      if (!isSeparator && data[\"routePath\"] === \"\") {\n        for (const key in data) {\n          if (data[key] !== null && data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      } else {\n        setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n\n        // console.log(currentData, data)\n\n        if (!currentData.is_app_header) {\n          data[\"parent_id\"] = currentData.id\n        } else {\n          data[\"parent_id\"] = null\n        }\n\n        data[\"id_app\"] = currentData.id_app\n        data[\"is_separator\"] = isSeparator\n        data[\"icon\"] = icon\n        // console.log(data)\n\n        dispatch(postData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      }\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  const changeSeparator = (data) => {\n    // console.log(data.target.checked)\n    setIsSeparator(data.target.checked)\n    if (data.target.checked) {\n    }\n  }\n\n  // const changeParentId = (data) => {\n  //   console.log(data)\n\n  //   if (data.is_app_header) {\n  //     setValue(\"parent_id\", { value: null })\n  //   } else {\n  //     setValue(\"parent_id\", data)\n  //   }\n\n  //   // if (data?.routePath) {\n  //   //   setValue(\"parent_id\", data.id)\n  //   //   setValue(\"routePath\", `${data?.routePath}/`)\n  //   // }\n  // }\n\n  // useEffect(() => {\n  //   console.log(store.dataDropdown)\n  // }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add Sub\")} {t(pageTitle)}\n            </h2>\n            {formState !== \"edit\" && (\n              <p className=\"mb-1\">\n                {t(\"Child for \")} {currentData ? t(currentData.title) : \"\"}\n              </p>\n            )}\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"title\">\n                  {t(\"Title\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.title ?? \"\"}\n                  control={control}\n                  id=\"title\"\n                  name=\"title\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.title\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"title\"\n                      invalid={errors.title && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              {!isSeparator && (\n                <Col md={4} xs={8} className=\"text-center\">\n                  <Label className=\"form-label\" for=\"icon\">\n                    {t(\"Icon\")}\n                    <span className=\"text-danger\">*</span>\n                  </Label>\n                  <div>\n                    {/* <Button.Ripple\n                      className=\"btn-icon\"\n                      outline\n                      color=\"primary\"\n                      size=\"sm\"\n                      onClick={toggleCanvasBottom}\n                    >\n                      {renderIcon(icon, \"14\")}\n                    </Button.Ripple> */}\n                  </div>\n                  <Controller\n                    defaultValue={store.selectedData?.icon ?? \"\"}\n                    control={control}\n                    id=\"icon\"\n                    name=\"icon\"\n                    render={({ field }) => (\n                      <InputGroup>\n                        <Input\n                          {...field}\n                          className={\n                            errors.icon\n                              ? \"form-control is-invalid\"\n                              : \"form-control\"\n                          }\n                          onChange={(event) => {\n                            const val = event.target.value\n                            field.onChange(val)\n                            setIcon(val)\n                          }}\n                          id=\"icon\"\n                          invalid={errors.icon && true}\n                        />\n                        <Button.Ripple\n                          className=\"btn-icon\"\n                          outline\n                          color=\"secondary\"\n                          onClick={toggleCanvasBottom}\n                        >\n                          {renderIcon(\n                            getValues()[\"icon\"] ??\n                              icon ??\n                              \"material:highlight_alt\",\n                            \"fw-bold\",\n                            16\n                          )}\n                        </Button.Ripple>\n                      </InputGroup>\n                    )}\n                  />\n                </Col>\n              )}\n\n              <Col className=\" d-grid justify-content-center\" md={2} xs={4}>\n                <Label className=\"form-label\" for=\"is_separator\">\n                  {t(\"Separator\")}\n                </Label>\n                <div\n                  style={{ marginTop: \"4px\" }}\n                  className=\"form-switch form-check-primary mx-auto\"\n                >\n                  <Input\n                    type=\"switch\"\n                    defaultChecked={isSeparator}\n                    onChange={(data) => {\n                      changeSeparator(data)\n                    }}\n                    id=\"icon-primary\"\n                    name=\"icon-primary\"\n                  />\n                  <CustomLabel htmlFor=\"icon-primary\" />\n                </div>\n              </Col>\n\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"parent_id\">\n                  {t(\"Parent Menu\")}\n                </Label>\n                <Controller\n                  defaultValue={\n                    store.dataDropdown.filter(\n                      (el) =>\n                        el.value ===\n                        (formState === \"edit\"\n                          ? currentData?.parent_id\n                          : currentData?.id)\n                    ) ?? \"\"\n                  }\n                  control={control}\n                  id=\"parent_id\"\n                  name=\"parent_id\"\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      id=\"parent_id\"\n                      theme={selectThemeColors}\n                      defaultValue={store.dataDropdown.filter(\n                        (el) =>\n                          el.value ===\n                          (formState === \"edit\"\n                            ? currentData?.parent_id\n                            : currentData?.id)\n                      )}\n                      // onChange={(data) => {\n                      //   changeParentId(data)\n                      // }}\n                      isDisabled={formState === \"add\"}\n                      options={store.dataDropdown\n                        .filter((el) => el.value !== store.selectedData?.id)\n                        .map((item) => ({\n                          ...item,\n                          // id_app: item.id_app,\n                          label: t(item.title)\n                        }))}\n                      className={classnames(\"react-select\", {\n                        \"is-invalid\": store.selectedData?.parent_id === null\n                      })}\n                      classNamePrefix=\"select\"\n                    />\n                  )}\n                />\n              </Col>\n\n              {!isSeparator && (\n                <Col md={6} xs={12}>\n                  <Label className=\"form-label\" for=\"subject\">\n                    {t(\"Route Path\")}\n                    <span className=\"text-danger\">*</span>\n                  </Label>\n                  <Controller\n                    defaultValue={store.selectedData?.routePath ?? \"\"}\n                    control={control}\n                    id=\"routePath\"\n                    name=\"routePath\"\n                    render={({ field }) => (\n                      <Input\n                        {...field}\n                        className={\n                          errors.routePath\n                            ? \"form-control is-invalid\"\n                            : \"form-control\"\n                        }\n                        id=\"routePath\"\n                        invalid={errors.routePath && true}\n                      />\n                    )}\n                  />\n                </Col>\n              )}\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"description\">\n                  {t(\"Description\")}\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.description ?? \"\"}\n                  control={control}\n                  id=\"description\"\n                  name=\"description\"\n                  render={({ field }) => (\n                    <TextareaAutosize\n                      {...field}\n                      className=\"form-control\"\n                      id=\"description\"\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n\n      <Offcanvas\n        direction={canvasPlacement}\n        isOpen={canvasOpen}\n        toggle={toggleCanvasStart}\n      >\n        <OffcanvasHeader className=\"mb-1 mt-1 me-1\" toggle={toggleCanvasStart}>\n          {t(\"Select\")} {t(\"Icon\")}\n          <Button.Ripple\n            className=\"ms-2 me-2\"\n            color=\"primary\"\n            outline={iconCategory !== \"feather\"}\n            onClick={(event) => {\n              setIconCategory(\"feather\")\n            }}\n          >\n            Feather Icon\n          </Button.Ripple>\n          <Button.Ripple\n            color=\"primary\"\n            outline={iconCategory !== \"material\"}\n            onClick={(event) => {\n              setIconCategory(\"material\")\n            }}\n          >\n            Material Icon\n          </Button.Ripple>\n        </OffcanvasHeader>\n        <OffcanvasBody\n          className={classnames({\n            \"my-auto mx-0 flex-grow-0\":\n              canvasPlacement === \"start\" || canvasPlacement === \"end\"\n          })}\n        >\n          {iconCategory === \"feather\" ? (\n            <IconsFeather\n              setIcon={setIconBefore}\n              setCanvasOpen={setCanvasOpen}\n            />\n          ) : (\n            // <IconsFeather setIcon={setIcon} setCanvasOpen={setCanvasOpen} />\n            <IconsMaterial\n              setIcon={setIconBefore}\n              setCanvasOpen={setCanvasOpen}\n            />\n          )}\n          {/* <Button\n            color=\"primary\"\n            onClick={toggleCanvasStart}\n            className={classnames({\n              \"mb-1\": canvasPlacement === \"start\" || canvasPlacement === \"end\",\n              \"me-1\": canvasPlacement === \"top\" || canvasPlacement === \"bottom\"\n            })}\n            {...(canvasPlacement === \"start\" || canvasPlacement === \"end\"\n              ? { block: true }\n              : {})}\n          >\n            Continue\n          </Button>\n          <Button\n            outline\n            color=\"secondary\"\n            onClick={toggleCanvasStart}\n            {...(canvasPlacement === \"start\" || canvasPlacement === \"end\"\n              ? { block: true }\n              : {})}\n          >\n            Cancel\n          </Button> */}\n        </OffcanvasBody>\n      </Offcanvas>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n"],"sourceRoot":""}