{"version":3,"sources":["views/apps/unit/store/my_unit.js"],"names":["initSelectData","value","label","setUnitSelectedDropdown","createAsyncThunk","data","getUnits","params","a","rejectWithValue","isUserLoggedIn","JSON","parse","localStorage","getItem","member_of","userMember","length","fetchState","some","e","children_count","useJwt","ssoAxiosInterceptor","get","response","total","getUnit","id","axios","addUnit","unit","dispatch","getState","post","units","getAllUnit","deleteUnit","delete","MyUnitsSlice","createSlice","name","initialState","crudTitle","statusSummary","isLoadingSummary","errorSummary","dataSummary","status","isLoading","error","dataDropdown","selectedUnit","selectedUnitMulti","reducers","setUnitSelected","state","action","console","log","payload","resetAll","extraReducers","builder","addCase","fulfilled","pending","map","item","unshift","rejected","message"],"mappings":"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","file":"static/js/81.953f8ba1.chunk.js","sourcesContent":["// ** Redux Imports\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { useTranslation } from \"react-i18next\"\n// ** Axios Imports\n// import axios from \"axios\"\n// import useJwt.ssoAxiosInterceptor from \"../../../../shared/SsoAxiosInterceptorsss\"\nimport useJwt from \"@src/auth/jwt/useJwt\"\nimport { isUserLoggedIn, isAdminApp } from \"@utils\"\nimport { bool } from \"prop-types\"\n\nconst initSelectData = {\n  value: \"\",\n  label: \"Select Unit\"\n}\n\nexport const setUnitSelectedDropdown = createAsyncThunk(\n  \"Units/setUnitSelectedDropdown\",\n  (data) => {\n    // console.log(data)\n    return data\n  }\n)\n\nexport const getUnits = createAsyncThunk(\n  \"Units/getUnits\",\n  async (params, { rejectWithValue }) => {\n    params[\"flat_mode\"] = true\n    // console.log(\"GET INIT MEMBER-OF START...\")\n    if (isUserLoggedIn() !== null) {\n      const userMember =\n        (await JSON.parse(localStorage.getItem(\"userData\")).member_of) ?? []\n\n      if (userMember.length > 0) {\n        // userMember.unshift(initSelectData)\n        let fetchState = false\n        if (userMember.some((e) => e.children_count > 0)) {\n          fetchState = true\n        }\n\n        if (fetchState) {\n          const response = await useJwt.ssoAxiosInterceptor.get(\"/api/unit\", {\n            params\n          })\n          // response.data.data.unshift(initSelectData)\n          // console.log(\"GET INIT MEMBER-OF SUCCESS\")\n          return {\n            params,\n            data: response.data.data,\n            total: response.data.total\n          }\n        } else {\n          // console.log(\"GET INIT MEMBER-OF SUCCESS\")\n          return { data: userMember }\n        }\n      } else {\n        try {\n          const response = await useJwt.ssoAxiosInterceptor.get(\"/api/unit\", {\n            params\n          })\n          // response.data.data.unshift(initSelectData)\n          // console.log(\"GET INIT MEMBER-OF SUCCESS\")\n          return {\n            params,\n            data: response.data.data,\n            total: response.data.total\n          }\n        } catch (error) {\n          // console.error(\"GET INIT MEMBER-OF FAILED!!!\")\n          return rejectWithValue(error.response.data)\n        }\n      }\n    }\n  }\n)\n\nexport const getUnit = createAsyncThunk(\"Units/getUnit\", async (id) => {\n  const response = await axios.get(`/api/unit/${id}`)\n  // console.log(response)\n  return response.data.data\n})\n\nexport const addUnit = createAsyncThunk(\n  \"Units/addUnit\",\n  async (unit, { dispatch, getState }) => {\n    await axios.post(\"/api/unit\", unit)\n    await dispatch(getUnits(getState().units.params))\n    await dispatch(getAllUnit())\n    return unit\n  }\n)\n\nexport const deleteUnit = createAsyncThunk(\n  \"Units/deleteUnit\",\n  async (id, { dispatch, getState }) => {\n    await axios.delete(\"/apps/unit\", { id })\n    await dispatch(getUnits(getState().units.params))\n    await dispatch(getAllUnit())\n    return id\n  }\n)\n\nconst fetchStatus = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\n\nexport const MyUnitsSlice = createSlice({\n  name: \"Units\",\n  initialState: {\n    crudTitle: \"Unit\",\n\n    // SUMMARY\n    statusSummary: fetchStatus,\n    isLoadingSummary: false,\n    errorSummary: \"\" | null,\n    dataSummary: [],\n\n    // ALL\n    status: fetchStatus,\n    isLoading: false,\n    error: \"\" | null,\n    data: [],\n    total: 1,\n\n    //SHARED\n    dataDropdown: [],\n    selectedUnit: {},\n    selectedUnitMulti: []\n  },\n  reducers: {\n    setUnitSelected: (state, action) => {\n      // console.log(action)\n      console.log(\"setUnitSelected\")\n      return { ...state, selectedUnit: action.payload }\n    },\n    resetAll: (state) => {\n      // state.errorSummary = null\n      // state.dataSummary = []\n      // state.error = null\n      state.data = []\n      state.dataDropdown = []\n      state.total = 1\n      state.selectedUnit = null\n      state.selectedUnitMulti = null\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(setUnitSelectedDropdown.fulfilled, (state, action) => {\n        // state.selectedUnit = action.payload\n        console.log(\"setUnitSelectedDropdown\")\n        return { ...state, selectedUnit: action.payload }\n        // console.log(state.selectedUnit)\n        // state.selectedUnit = { ...state.selectedUnit, ...action.payload }\n      })\n      .addCase(getUnits.pending, (state) => {\n        // console.log(\"pending\")\n        state.status = \"loading\"\n        state.isLoading = true\n      })\n      .addCase(getUnits.fulfilled, (state, action) => {\n        state.status = \"succeeded\"\n        state.isLoading = false\n\n        if (action.payload?.data) {\n          state.data = action.payload.data\n          state.dataDropdown = action.payload.data.map((item) => ({\n            value: item.id,\n            label: item.name\n          }))\n          // console.log(state.dataDropdown)\n          state.dataDropdown.unshift(initSelectData)\n          if (action.payload?.total) {\n            state.total = action.payload.total\n          }\n          state.selectedUnit = state.dataDropdown[0]\n        }\n      })\n      .addCase(getUnits.rejected, (state, action) => {\n        state.status = \"failed\"\n        state.isLoading = false\n        state.error = action.error.message\n      })\n\n      .addCase(getUnit.fulfilled, (state, action) => {\n        state.selectedUnit = action.payload\n      })\n  }\n})\n\n// export const { setUnitSelected, resetAll } = UnitsSlice.actions\n\nexport default MyUnitsSlice.reducer\n"],"sourceRoot":""}